/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost struct for ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost
type ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost struct {
	AccountEntity *AccountEntity
	DomainEntity *DomainEntity
	RepositoryEntity *RepositoryEntity
	SubdomainEntity *SubdomainEntity
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AccountEntity
	err = json.Unmarshal(data, &dst.AccountEntity);
	if err == nil {
		jsonAccountEntity, _ := json.Marshal(dst.AccountEntity)
		if string(jsonAccountEntity) == "{}" { // empty struct
			dst.AccountEntity = nil
		} else {
			return nil // data stored in dst.AccountEntity, return on the first match
		}
	} else {
		dst.AccountEntity = nil
	}

	// try to unmarshal JSON data into DomainEntity
	err = json.Unmarshal(data, &dst.DomainEntity);
	if err == nil {
		jsonDomainEntity, _ := json.Marshal(dst.DomainEntity)
		if string(jsonDomainEntity) == "{}" { // empty struct
			dst.DomainEntity = nil
		} else {
			return nil // data stored in dst.DomainEntity, return on the first match
		}
	} else {
		dst.DomainEntity = nil
	}

	// try to unmarshal JSON data into RepositoryEntity
	err = json.Unmarshal(data, &dst.RepositoryEntity);
	if err == nil {
		jsonRepositoryEntity, _ := json.Marshal(dst.RepositoryEntity)
		if string(jsonRepositoryEntity) == "{}" { // empty struct
			dst.RepositoryEntity = nil
		} else {
			return nil // data stored in dst.RepositoryEntity, return on the first match
		}
	} else {
		dst.RepositoryEntity = nil
	}

	// try to unmarshal JSON data into SubdomainEntity
	err = json.Unmarshal(data, &dst.SubdomainEntity);
	if err == nil {
		jsonSubdomainEntity, _ := json.Marshal(dst.SubdomainEntity)
		if string(jsonSubdomainEntity) == "{}" { // empty struct
			dst.SubdomainEntity = nil
		} else {
			return nil // data stored in dst.SubdomainEntity, return on the first match
		}
	} else {
		dst.SubdomainEntity = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost) MarshalJSON() ([]byte, error) {
	if src.AccountEntity != nil {
		return json.Marshal(&src.AccountEntity)
	}

	if src.DomainEntity != nil {
		return json.Marshal(&src.DomainEntity)
	}

	if src.RepositoryEntity != nil {
		return json.Marshal(&src.RepositoryEntity)
	}

	if src.SubdomainEntity != nil {
		return json.Marshal(&src.SubdomainEntity)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost struct {
	value *ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost
	isSet bool
}

func (v NullableResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost) Get() *ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost {
	return v.value
}

func (v *NullableResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost) Set(val *ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost(val *ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost) *NullableResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost {
	return &NullableResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost{value: val, isSet: true}
}

func (v NullableResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


