/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UploadFailure struct for UploadFailure
type UploadFailure struct {
	Line string `json:"line"`
	Reason UploadFailureReasonEnum `json:"reason"`
}

// NewUploadFailure instantiates a new UploadFailure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadFailure(line string, reason UploadFailureReasonEnum) *UploadFailure {
	this := UploadFailure{}
	this.Line = line
	this.Reason = reason
	return &this
}

// NewUploadFailureWithDefaults instantiates a new UploadFailure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadFailureWithDefaults() *UploadFailure {
	this := UploadFailure{}
	return &this
}

// GetLine returns the Line field value
func (o *UploadFailure) GetLine() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Line
}

// GetLineOk returns a tuple with the Line field value
// and a boolean to check if the value has been set.
func (o *UploadFailure) GetLineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Line, true
}

// SetLine sets field value
func (o *UploadFailure) SetLine(v string) {
	o.Line = v
}

// GetReason returns the Reason field value
func (o *UploadFailure) GetReason() UploadFailureReasonEnum {
	if o == nil {
		var ret UploadFailureReasonEnum
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *UploadFailure) GetReasonOk() (*UploadFailureReasonEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *UploadFailure) SetReason(v UploadFailureReasonEnum) {
	o.Reason = v
}

func (o UploadFailure) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["line"] = o.Line
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableUploadFailure struct {
	value *UploadFailure
	isSet bool
}

func (v NullableUploadFailure) Get() *UploadFailure {
	return v.value
}

func (v *NullableUploadFailure) Set(val *UploadFailure) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadFailure) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadFailure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadFailure(val *UploadFailure) *NullableUploadFailure {
	return &NullableUploadFailure{value: val, isSet: true}
}

func (v NullableUploadFailure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadFailure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


