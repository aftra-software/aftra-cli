/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OpportunityGroup An enumeration.
type OpportunityGroup string

// List of OpportunityGroup
const (
	DOMAINS OpportunityGroup = "domains"
	VULNERABILITIES OpportunityGroup = "vulnerabilities"
	TECH_PROFILE OpportunityGroup = "tech_profile"
	HUMAN_EXPOSURE OpportunityGroup = "human_exposure"
	SECURITY_MATURITY OpportunityGroup = "security_maturity"
	INTERNAL OpportunityGroup = "internal"
)

// All allowed values of OpportunityGroup enum
var AllowedOpportunityGroupEnumValues = []OpportunityGroup{
	"domains",
	"vulnerabilities",
	"tech_profile",
	"human_exposure",
	"security_maturity",
	"internal",
}

func (v *OpportunityGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpportunityGroup(value)
	for _, existing := range AllowedOpportunityGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OpportunityGroup", value)
}

// NewOpportunityGroupFromValue returns a pointer to a valid OpportunityGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpportunityGroupFromValue(v string) (*OpportunityGroup, error) {
	ev := OpportunityGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OpportunityGroup: valid values are %v", v, AllowedOpportunityGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpportunityGroup) IsValid() bool {
	for _, existing := range AllowedOpportunityGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpportunityGroup value
func (v OpportunityGroup) Ptr() *OpportunityGroup {
	return &v
}

type NullableOpportunityGroup struct {
	value *OpportunityGroup
	isSet bool
}

func (v NullableOpportunityGroup) Get() *OpportunityGroup {
	return v.value
}

func (v *NullableOpportunityGroup) Set(val *OpportunityGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityGroup(val *OpportunityGroup) *NullableOpportunityGroup {
	return &NullableOpportunityGroup{value: val, isSet: true}
}

func (v NullableOpportunityGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

