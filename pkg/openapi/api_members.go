/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// MembersApiService MembersApi service
type MembersApiService service

type ApiDeleteCompanyMemberRequest struct {
	ctx context.Context
	ApiService *MembersApiService
	parentPk string
	userPk string
	companyPk *string
	identity *string
}

func (r ApiDeleteCompanyMemberRequest) CompanyPk(companyPk string) ApiDeleteCompanyMemberRequest {
	r.companyPk = &companyPk
	return r
}

func (r ApiDeleteCompanyMemberRequest) Identity(identity string) ApiDeleteCompanyMemberRequest {
	r.identity = &identity
	return r
}

func (r ApiDeleteCompanyMemberRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteCompanyMemberExecute(r)
}

/*
DeleteCompanyMember Delete Company Member

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @param userPk
 @return ApiDeleteCompanyMemberRequest
*/
func (a *MembersApiService) DeleteCompanyMember(ctx context.Context, parentPk string, userPk string) ApiDeleteCompanyMemberRequest {
	return ApiDeleteCompanyMemberRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
		userPk: userPk,
	}
}

// Execute executes the request
func (a *MembersApiService) DeleteCompanyMemberExecute(r ApiDeleteCompanyMemberRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersApiService.DeleteCompanyMember")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{parent_pk}/members/{user_pk}/"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_pk"+"}", url.PathEscape(parameterToString(r.userPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.companyPk != nil {
		localVarQueryParams.Add("company_pk", parameterToString(*r.companyPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetCompanyMembersRequest struct {
	ctx context.Context
	ApiService *MembersApiService
	parentPk string
	companyPk *string
	identity *string
}

func (r ApiGetCompanyMembersRequest) CompanyPk(companyPk string) ApiGetCompanyMembersRequest {
	r.companyPk = &companyPk
	return r
}

func (r ApiGetCompanyMembersRequest) Identity(identity string) ApiGetCompanyMembersRequest {
	r.identity = &identity
	return r
}

func (r ApiGetCompanyMembersRequest) Execute() ([]UserCompanyAccessEntity, *http.Response, error) {
	return r.ApiService.GetCompanyMembersExecute(r)
}

/*
GetCompanyMembers Get Company Members

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @return ApiGetCompanyMembersRequest
*/
func (a *MembersApiService) GetCompanyMembers(ctx context.Context, parentPk string) ApiGetCompanyMembersRequest {
	return ApiGetCompanyMembersRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
	}
}

// Execute executes the request
//  @return []UserCompanyAccessEntity
func (a *MembersApiService) GetCompanyMembersExecute(r ApiGetCompanyMembersRequest) ([]UserCompanyAccessEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []UserCompanyAccessEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersApiService.GetCompanyMembers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{parent_pk}/members/"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.companyPk != nil {
		localVarQueryParams.Add("company_pk", parameterToString(*r.companyPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSendCompanyInviteRequest struct {
	ctx context.Context
	ApiService *MembersApiService
	parentPk string
	invite *Invite
	companyPk *string
	identity *string
}

func (r ApiSendCompanyInviteRequest) Invite(invite Invite) ApiSendCompanyInviteRequest {
	r.invite = &invite
	return r
}

func (r ApiSendCompanyInviteRequest) CompanyPk(companyPk string) ApiSendCompanyInviteRequest {
	r.companyPk = &companyPk
	return r
}

func (r ApiSendCompanyInviteRequest) Identity(identity string) ApiSendCompanyInviteRequest {
	r.identity = &identity
	return r
}

func (r ApiSendCompanyInviteRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.SendCompanyInviteExecute(r)
}

/*
SendCompanyInvite Create And Send Invite

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @return ApiSendCompanyInviteRequest
*/
func (a *MembersApiService) SendCompanyInvite(ctx context.Context, parentPk string) ApiSendCompanyInviteRequest {
	return ApiSendCompanyInviteRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
	}
}

// Execute executes the request
//  @return interface{}
func (a *MembersApiService) SendCompanyInviteExecute(r ApiSendCompanyInviteRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersApiService.SendCompanyInvite")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{parent_pk}/members/"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.invite == nil {
		return localVarReturnValue, nil, reportError("invite is required and must be specified")
	}

	if r.companyPk != nil {
		localVarQueryParams.Add("company_pk", parameterToString(*r.companyPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.invite
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateMemberPermissionRequest struct {
	ctx context.Context
	ApiService *MembersApiService
	parentPk string
	userPk string
	accessTypeUpdate *AccessTypeUpdate
	companyPk *string
	identity *string
}

func (r ApiUpdateMemberPermissionRequest) AccessTypeUpdate(accessTypeUpdate AccessTypeUpdate) ApiUpdateMemberPermissionRequest {
	r.accessTypeUpdate = &accessTypeUpdate
	return r
}

func (r ApiUpdateMemberPermissionRequest) CompanyPk(companyPk string) ApiUpdateMemberPermissionRequest {
	r.companyPk = &companyPk
	return r
}

func (r ApiUpdateMemberPermissionRequest) Identity(identity string) ApiUpdateMemberPermissionRequest {
	r.identity = &identity
	return r
}

func (r ApiUpdateMemberPermissionRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateMemberPermissionExecute(r)
}

/*
UpdateMemberPermission Update Member Permission

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @param userPk
 @return ApiUpdateMemberPermissionRequest
*/
func (a *MembersApiService) UpdateMemberPermission(ctx context.Context, parentPk string, userPk string) ApiUpdateMemberPermissionRequest {
	return ApiUpdateMemberPermissionRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
		userPk: userPk,
	}
}

// Execute executes the request
func (a *MembersApiService) UpdateMemberPermissionExecute(r ApiUpdateMemberPermissionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MembersApiService.UpdateMemberPermission")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{parent_pk}/members/{user_pk}/"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_pk"+"}", url.PathEscape(parameterToString(r.userPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accessTypeUpdate == nil {
		return nil, reportError("accessTypeUpdate is required and must be specified")
	}

	if r.companyPk != nil {
		localVarQueryParams.Add("company_pk", parameterToString(*r.companyPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accessTypeUpdate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
