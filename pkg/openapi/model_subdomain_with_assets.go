/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SubdomainWithAssets struct for SubdomainWithAssets
type SubdomainWithAssets struct {
	Assets PaginatedEntityCollectionMetaEntity `json:"assets"`
	Entity SubdomainEntity `json:"entity"`
}

// NewSubdomainWithAssets instantiates a new SubdomainWithAssets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubdomainWithAssets(assets PaginatedEntityCollectionMetaEntity, entity SubdomainEntity) *SubdomainWithAssets {
	this := SubdomainWithAssets{}
	this.Assets = assets
	this.Entity = entity
	return &this
}

// NewSubdomainWithAssetsWithDefaults instantiates a new SubdomainWithAssets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubdomainWithAssetsWithDefaults() *SubdomainWithAssets {
	this := SubdomainWithAssets{}
	return &this
}

// GetAssets returns the Assets field value
func (o *SubdomainWithAssets) GetAssets() PaginatedEntityCollectionMetaEntity {
	if o == nil {
		var ret PaginatedEntityCollectionMetaEntity
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *SubdomainWithAssets) GetAssetsOk() (*PaginatedEntityCollectionMetaEntity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assets, true
}

// SetAssets sets field value
func (o *SubdomainWithAssets) SetAssets(v PaginatedEntityCollectionMetaEntity) {
	o.Assets = v
}

// GetEntity returns the Entity field value
func (o *SubdomainWithAssets) GetEntity() SubdomainEntity {
	if o == nil {
		var ret SubdomainEntity
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *SubdomainWithAssets) GetEntityOk() (*SubdomainEntity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *SubdomainWithAssets) SetEntity(v SubdomainEntity) {
	o.Entity = v
}

func (o SubdomainWithAssets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["assets"] = o.Assets
	}
	if true {
		toSerialize["entity"] = o.Entity
	}
	return json.Marshal(toSerialize)
}

type NullableSubdomainWithAssets struct {
	value *SubdomainWithAssets
	isSet bool
}

func (v NullableSubdomainWithAssets) Get() *SubdomainWithAssets {
	return v.value
}

func (v *NullableSubdomainWithAssets) Set(val *SubdomainWithAssets) {
	v.value = val
	v.isSet = true
}

func (v NullableSubdomainWithAssets) IsSet() bool {
	return v.isSet
}

func (v *NullableSubdomainWithAssets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubdomainWithAssets(val *SubdomainWithAssets) *NullableSubdomainWithAssets {
	return &NullableSubdomainWithAssets{value: val, isSet: true}
}

func (v NullableSubdomainWithAssets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubdomainWithAssets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


