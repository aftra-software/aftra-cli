/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MFAAnswer An enumeration.
type MFAAnswer string

// List of MFAAnswer
const (
	ALWAYS MFAAnswer = "always"
	OFTEN MFAAnswer = "often"
	SOMETIMES MFAAnswer = "sometimes"
	NEVER MFAAnswer = "never"
)

// All allowed values of MFAAnswer enum
var AllowedMFAAnswerEnumValues = []MFAAnswer{
	"always",
	"often",
	"sometimes",
	"never",
}

func (v *MFAAnswer) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MFAAnswer(value)
	for _, existing := range AllowedMFAAnswerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MFAAnswer", value)
}

// NewMFAAnswerFromValue returns a pointer to a valid MFAAnswer
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMFAAnswerFromValue(v string) (*MFAAnswer, error) {
	ev := MFAAnswer(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MFAAnswer: valid values are %v", v, AllowedMFAAnswerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MFAAnswer) IsValid() bool {
	for _, existing := range AllowedMFAAnswerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MFAAnswer value
func (v MFAAnswer) Ptr() *MFAAnswer {
	return &v
}

type NullableMFAAnswer struct {
	value *MFAAnswer
	isSet bool
}

func (v NullableMFAAnswer) Get() *MFAAnswer {
	return v.value
}

func (v *NullableMFAAnswer) Set(val *MFAAnswer) {
	v.value = val
	v.isSet = true
}

func (v NullableMFAAnswer) IsSet() bool {
	return v.isSet
}

func (v *NullableMFAAnswer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMFAAnswer(val *MFAAnswer) *NullableMFAAnswer {
	return &NullableMFAAnswer{value: val, isSet: true}
}

func (v NullableMFAAnswer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMFAAnswer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

