/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"fmt"
)

// ResponseWhoisDomain struct for ResponseWhoisDomain
type ResponseWhoisDomain struct {
	WhoisData *WhoisData
	WhoisError *WhoisError
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ResponseWhoisDomain) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into WhoisData
	err = json.Unmarshal(data, &dst.WhoisData);
	if err == nil {
		jsonWhoisData, _ := json.Marshal(dst.WhoisData)
		if string(jsonWhoisData) == "{}" { // empty struct
			dst.WhoisData = nil
		} else {
			return nil // data stored in dst.WhoisData, return on the first match
		}
	} else {
		dst.WhoisData = nil
	}

	// try to unmarshal JSON data into WhoisError
	err = json.Unmarshal(data, &dst.WhoisError);
	if err == nil {
		jsonWhoisError, _ := json.Marshal(dst.WhoisError)
		if string(jsonWhoisError) == "{}" { // empty struct
			dst.WhoisError = nil
		} else {
			return nil // data stored in dst.WhoisError, return on the first match
		}
	} else {
		dst.WhoisError = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(ResponseWhoisDomain)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ResponseWhoisDomain) MarshalJSON() ([]byte, error) {
	if src.WhoisData != nil {
		return json.Marshal(&src.WhoisData)
	}

	if src.WhoisError != nil {
		return json.Marshal(&src.WhoisError)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableResponseWhoisDomain struct {
	value *ResponseWhoisDomain
	isSet bool
}

func (v NullableResponseWhoisDomain) Get() *ResponseWhoisDomain {
	return v.value
}

func (v *NullableResponseWhoisDomain) Set(val *ResponseWhoisDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseWhoisDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseWhoisDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseWhoisDomain(val *ResponseWhoisDomain) *NullableResponseWhoisDomain {
	return &NullableResponseWhoisDomain{value: val, isSet: true}
}

func (v NullableResponseWhoisDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseWhoisDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


