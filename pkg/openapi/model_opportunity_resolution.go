/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OpportunityResolution An enumeration.
type OpportunityResolution string

// List of OpportunityResolution
const (
	UNACKNOWLEDGED OpportunityResolution = "unacknowledged"
	ACCEPTED_RISK OpportunityResolution = "accepted_risk"
	RESOLVED OpportunityResolution = "resolved"
	FALSE_POSITIVE OpportunityResolution = "false_positive"
)

// All allowed values of OpportunityResolution enum
var AllowedOpportunityResolutionEnumValues = []OpportunityResolution{
	"unacknowledged",
	"accepted_risk",
	"resolved",
	"false_positive",
}

func (v *OpportunityResolution) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OpportunityResolution(value)
	for _, existing := range AllowedOpportunityResolutionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OpportunityResolution", value)
}

// NewOpportunityResolutionFromValue returns a pointer to a valid OpportunityResolution
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOpportunityResolutionFromValue(v string) (*OpportunityResolution, error) {
	ev := OpportunityResolution(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OpportunityResolution: valid values are %v", v, AllowedOpportunityResolutionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OpportunityResolution) IsValid() bool {
	for _, existing := range AllowedOpportunityResolutionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OpportunityResolution value
func (v OpportunityResolution) Ptr() *OpportunityResolution {
	return &v
}

type NullableOpportunityResolution struct {
	value *OpportunityResolution
	isSet bool
}

func (v NullableOpportunityResolution) Get() *OpportunityResolution {
	return v.value
}

func (v *NullableOpportunityResolution) Set(val *OpportunityResolution) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunityResolution) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunityResolution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunityResolution(val *OpportunityResolution) *NullableOpportunityResolution {
	return &NullableOpportunityResolution{value: val, isSet: true}
}

func (v NullableOpportunityResolution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunityResolution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

