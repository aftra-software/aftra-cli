/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WhoisError struct for WhoisError
type WhoisError struct {
	Success *bool `json:"success,omitempty"`
	Error Array `json:"error"`
}

// NewWhoisError instantiates a new WhoisError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWhoisError(error_ Array) *WhoisError {
	this := WhoisError{}
	var success bool = false
	this.Success = &success
	this.Error = error_
	return &this
}

// NewWhoisErrorWithDefaults instantiates a new WhoisError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWhoisErrorWithDefaults() *WhoisError {
	this := WhoisError{}
	var success bool = false
	this.Success = &success
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *WhoisError) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WhoisError) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *WhoisError) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *WhoisError) SetSuccess(v bool) {
	o.Success = &v
}

// GetError returns the Error field value
func (o *WhoisError) GetError() Array {
	if o == nil {
		var ret Array
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *WhoisError) GetErrorOk() (*Array, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *WhoisError) SetError(v Array) {
	o.Error = v
}

func (o WhoisError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	if true {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableWhoisError struct {
	value *WhoisError
	isSet bool
}

func (v NullableWhoisError) Get() *WhoisError {
	return v.value
}

func (v *NullableWhoisError) Set(val *WhoisError) {
	v.value = val
	v.isSet = true
}

func (v NullableWhoisError) IsSet() bool {
	return v.isSet
}

func (v *NullableWhoisError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWhoisError(val *WhoisError) *NullableWhoisError {
	return &NullableWhoisError{value: val, isSet: true}
}

func (v NullableWhoisError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWhoisError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


