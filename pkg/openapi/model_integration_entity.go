/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// IntegrationEntity struct for IntegrationEntity
type IntegrationEntity struct {
	InstallationId string `json:"installationId"`
	IntegrationType IntegrationTypeEnum `json:"integrationType"`
	User string `json:"user"`
	Name *string `json:"name,omitempty"`
	Pk string `json:"pk"`
	Sk string `json:"sk"`
	EntityType *string `json:"entityType,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

// NewIntegrationEntity instantiates a new IntegrationEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationEntity(installationId string, integrationType IntegrationTypeEnum, user string, pk string, sk string) *IntegrationEntity {
	this := IntegrationEntity{}
	this.InstallationId = installationId
	this.IntegrationType = integrationType
	this.User = user
	var name string = ""
	this.Name = &name
	this.Pk = pk
	this.Sk = sk
	return &this
}

// NewIntegrationEntityWithDefaults instantiates a new IntegrationEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationEntityWithDefaults() *IntegrationEntity {
	this := IntegrationEntity{}
	var name string = ""
	this.Name = &name
	return &this
}

// GetInstallationId returns the InstallationId field value
func (o *IntegrationEntity) GetInstallationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InstallationId
}

// GetInstallationIdOk returns a tuple with the InstallationId field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetInstallationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InstallationId, true
}

// SetInstallationId sets field value
func (o *IntegrationEntity) SetInstallationId(v string) {
	o.InstallationId = v
}

// GetIntegrationType returns the IntegrationType field value
func (o *IntegrationEntity) GetIntegrationType() IntegrationTypeEnum {
	if o == nil {
		var ret IntegrationTypeEnum
		return ret
	}

	return o.IntegrationType
}

// GetIntegrationTypeOk returns a tuple with the IntegrationType field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetIntegrationTypeOk() (*IntegrationTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegrationType, true
}

// SetIntegrationType sets field value
func (o *IntegrationEntity) SetIntegrationType(v IntegrationTypeEnum) {
	o.IntegrationType = v
}

// GetUser returns the User field value
func (o *IntegrationEntity) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *IntegrationEntity) SetUser(v string) {
	o.User = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IntegrationEntity) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IntegrationEntity) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IntegrationEntity) SetName(v string) {
	o.Name = &v
}

// GetPk returns the Pk field value
func (o *IntegrationEntity) GetPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *IntegrationEntity) SetPk(v string) {
	o.Pk = v
}

// GetSk returns the Sk field value
func (o *IntegrationEntity) GetSk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sk
}

// GetSkOk returns a tuple with the Sk field value
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetSkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sk, true
}

// SetSk sets field value
func (o *IntegrationEntity) SetSk(v string) {
	o.Sk = v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *IntegrationEntity) GetEntityType() string {
	if o == nil || o.EntityType == nil {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetEntityTypeOk() (*string, bool) {
	if o == nil || o.EntityType == nil {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *IntegrationEntity) HasEntityType() bool {
	if o != nil && o.EntityType != nil {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *IntegrationEntity) SetEntityType(v string) {
	o.EntityType = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *IntegrationEntity) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *IntegrationEntity) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *IntegrationEntity) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *IntegrationEntity) GetUpdated() time.Time {
	if o == nil || o.Updated == nil {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationEntity) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *IntegrationEntity) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *IntegrationEntity) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o IntegrationEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["installationId"] = o.InstallationId
	}
	if true {
		toSerialize["integrationType"] = o.IntegrationType
	}
	if true {
		toSerialize["user"] = o.User
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["pk"] = o.Pk
	}
	if true {
		toSerialize["sk"] = o.Sk
	}
	if o.EntityType != nil {
		toSerialize["entityType"] = o.EntityType
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableIntegrationEntity struct {
	value *IntegrationEntity
	isSet bool
}

func (v NullableIntegrationEntity) Get() *IntegrationEntity {
	return v.value
}

func (v *NullableIntegrationEntity) Set(val *IntegrationEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationEntity(val *IntegrationEntity) *NullableIntegrationEntity {
	return &NullableIntegrationEntity{value: val, isSet: true}
}

func (v NullableIntegrationEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


