/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyWithUserAccess struct for CompanyWithUserAccess
type CompanyWithUserAccess struct {
	Company CompanyEntity `json:"company"`
	AccessType CompanyAccessEnum `json:"access_type"`
}

// NewCompanyWithUserAccess instantiates a new CompanyWithUserAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyWithUserAccess(company CompanyEntity, accessType CompanyAccessEnum) *CompanyWithUserAccess {
	this := CompanyWithUserAccess{}
	this.Company = company
	this.AccessType = accessType
	return &this
}

// NewCompanyWithUserAccessWithDefaults instantiates a new CompanyWithUserAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyWithUserAccessWithDefaults() *CompanyWithUserAccess {
	this := CompanyWithUserAccess{}
	return &this
}

// GetCompany returns the Company field value
func (o *CompanyWithUserAccess) GetCompany() CompanyEntity {
	if o == nil {
		var ret CompanyEntity
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *CompanyWithUserAccess) GetCompanyOk() (*CompanyEntity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *CompanyWithUserAccess) SetCompany(v CompanyEntity) {
	o.Company = v
}

// GetAccessType returns the AccessType field value
func (o *CompanyWithUserAccess) GetAccessType() CompanyAccessEnum {
	if o == nil {
		var ret CompanyAccessEnum
		return ret
	}

	return o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value
// and a boolean to check if the value has been set.
func (o *CompanyWithUserAccess) GetAccessTypeOk() (*CompanyAccessEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessType, true
}

// SetAccessType sets field value
func (o *CompanyWithUserAccess) SetAccessType(v CompanyAccessEnum) {
	o.AccessType = v
}

func (o CompanyWithUserAccess) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["company"] = o.Company
	}
	if true {
		toSerialize["access_type"] = o.AccessType
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyWithUserAccess struct {
	value *CompanyWithUserAccess
	isSet bool
}

func (v NullableCompanyWithUserAccess) Get() *CompanyWithUserAccess {
	return v.value
}

func (v *NullableCompanyWithUserAccess) Set(val *CompanyWithUserAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyWithUserAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyWithUserAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyWithUserAccess(val *CompanyWithUserAccess) *NullableCompanyWithUserAccess {
	return &NullableCompanyWithUserAccess{value: val, isSet: true}
}

func (v NullableCompanyWithUserAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyWithUserAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


