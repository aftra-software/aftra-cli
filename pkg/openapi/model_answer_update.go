/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AnswerUpdate struct for AnswerUpdate
type AnswerUpdate struct {
	Answer string `json:"answer"`
}

// NewAnswerUpdate instantiates a new AnswerUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnswerUpdate(answer string) *AnswerUpdate {
	this := AnswerUpdate{}
	this.Answer = answer
	return &this
}

// NewAnswerUpdateWithDefaults instantiates a new AnswerUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnswerUpdateWithDefaults() *AnswerUpdate {
	this := AnswerUpdate{}
	return &this
}

// GetAnswer returns the Answer field value
func (o *AnswerUpdate) GetAnswer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value
// and a boolean to check if the value has been set.
func (o *AnswerUpdate) GetAnswerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Answer, true
}

// SetAnswer sets field value
func (o *AnswerUpdate) SetAnswer(v string) {
	o.Answer = v
}

func (o AnswerUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["answer"] = o.Answer
	}
	return json.Marshal(toSerialize)
}

type NullableAnswerUpdate struct {
	value *AnswerUpdate
	isSet bool
}

func (v NullableAnswerUpdate) Get() *AnswerUpdate {
	return v.value
}

func (v *NullableAnswerUpdate) Set(val *AnswerUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableAnswerUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableAnswerUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnswerUpdate(val *AnswerUpdate) *NullableAnswerUpdate {
	return &NullableAnswerUpdate{value: val, isSet: true}
}

func (v NullableAnswerUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnswerUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


