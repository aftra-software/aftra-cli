/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GlobalStats struct for GlobalStats
type GlobalStats struct {
	Type *string `json:"type,omitempty"`
	Company *string `json:"company,omitempty"`
	Date string `json:"date"`
	GlobalMean int32 `json:"global_mean"`
	BySector map[string]CompanySectorScore `json:"by_sector"`
}

// NewGlobalStats instantiates a new GlobalStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalStats(date string, globalMean int32, bySector map[string]CompanySectorScore) *GlobalStats {
	this := GlobalStats{}
	var type_ string = "GLOBAL_STATS"
	this.Type = &type_
	var company string = "GLOBAL-STATS"
	this.Company = &company
	this.Date = date
	this.GlobalMean = globalMean
	this.BySector = bySector
	return &this
}

// NewGlobalStatsWithDefaults instantiates a new GlobalStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalStatsWithDefaults() *GlobalStats {
	this := GlobalStats{}
	var type_ string = "GLOBAL_STATS"
	this.Type = &type_
	var company string = "GLOBAL-STATS"
	this.Company = &company
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GlobalStats) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalStats) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GlobalStats) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GlobalStats) SetType(v string) {
	o.Type = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *GlobalStats) GetCompany() string {
	if o == nil || o.Company == nil {
		var ret string
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalStats) GetCompanyOk() (*string, bool) {
	if o == nil || o.Company == nil {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *GlobalStats) HasCompany() bool {
	if o != nil && o.Company != nil {
		return true
	}

	return false
}

// SetCompany gets a reference to the given string and assigns it to the Company field.
func (o *GlobalStats) SetCompany(v string) {
	o.Company = &v
}

// GetDate returns the Date field value
func (o *GlobalStats) GetDate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *GlobalStats) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *GlobalStats) SetDate(v string) {
	o.Date = v
}

// GetGlobalMean returns the GlobalMean field value
func (o *GlobalStats) GetGlobalMean() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.GlobalMean
}

// GetGlobalMeanOk returns a tuple with the GlobalMean field value
// and a boolean to check if the value has been set.
func (o *GlobalStats) GetGlobalMeanOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GlobalMean, true
}

// SetGlobalMean sets field value
func (o *GlobalStats) SetGlobalMean(v int32) {
	o.GlobalMean = v
}

// GetBySector returns the BySector field value
func (o *GlobalStats) GetBySector() map[string]CompanySectorScore {
	if o == nil {
		var ret map[string]CompanySectorScore
		return ret
	}

	return o.BySector
}

// GetBySectorOk returns a tuple with the BySector field value
// and a boolean to check if the value has been set.
func (o *GlobalStats) GetBySectorOk() (*map[string]CompanySectorScore, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BySector, true
}

// SetBySector sets field value
func (o *GlobalStats) SetBySector(v map[string]CompanySectorScore) {
	o.BySector = v
}

func (o GlobalStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Company != nil {
		toSerialize["company"] = o.Company
	}
	if true {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["global_mean"] = o.GlobalMean
	}
	if true {
		toSerialize["by_sector"] = o.BySector
	}
	return json.Marshal(toSerialize)
}

type NullableGlobalStats struct {
	value *GlobalStats
	isSet bool
}

func (v NullableGlobalStats) Get() *GlobalStats {
	return v.value
}

func (v *NullableGlobalStats) Set(val *GlobalStats) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalStats) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalStats(val *GlobalStats) *NullableGlobalStats {
	return &NullableGlobalStats{value: val, isSet: true}
}

func (v NullableGlobalStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


