/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// IndividualScore struct for IndividualScore
type IndividualScore struct {
	Score ScoreLevel `json:"score"`
	Reason string `json:"reason"`
}

// NewIndividualScore instantiates a new IndividualScore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndividualScore(score ScoreLevel, reason string) *IndividualScore {
	this := IndividualScore{}
	this.Score = score
	this.Reason = reason
	return &this
}

// NewIndividualScoreWithDefaults instantiates a new IndividualScore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndividualScoreWithDefaults() *IndividualScore {
	this := IndividualScore{}
	return &this
}

// GetScore returns the Score field value
func (o *IndividualScore) GetScore() ScoreLevel {
	if o == nil {
		var ret ScoreLevel
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *IndividualScore) GetScoreOk() (*ScoreLevel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *IndividualScore) SetScore(v ScoreLevel) {
	o.Score = v
}

// GetReason returns the Reason field value
func (o *IndividualScore) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *IndividualScore) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *IndividualScore) SetReason(v string) {
	o.Reason = v
}

func (o IndividualScore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["score"] = o.Score
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableIndividualScore struct {
	value *IndividualScore
	isSet bool
}

func (v NullableIndividualScore) Get() *IndividualScore {
	return v.value
}

func (v *NullableIndividualScore) Set(val *IndividualScore) {
	v.value = val
	v.isSet = true
}

func (v NullableIndividualScore) IsSet() bool {
	return v.isSet
}

func (v *NullableIndividualScore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndividualScore(val *IndividualScore) *NullableIndividualScore {
	return &NullableIndividualScore{value: val, isSet: true}
}

func (v NullableIndividualScore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndividualScore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


