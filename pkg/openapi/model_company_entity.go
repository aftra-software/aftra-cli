/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CompanyEntity struct for CompanyEntity
type CompanyEntity struct {
	Name string `json:"name"`
	MainContact string `json:"mainContact"`
	Website string `json:"website"`
	EmployeeCount *int32 `json:"employeeCount,omitempty"`
	EmployeeCountIt *int32 `json:"employeeCountIt,omitempty"`
	Sector *CompanySector `json:"sector,omitempty"`
	VulnScanFrequency *ScanFrequency `json:"vulnScanFrequency,omitempty"`
	Pk string `json:"pk"`
	Sk string `json:"sk"`
	EntityType *string `json:"entityType,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

// NewCompanyEntity instantiates a new CompanyEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyEntity(name string, mainContact string, website string, pk string, sk string) *CompanyEntity {
	this := CompanyEntity{}
	this.Name = name
	this.MainContact = mainContact
	this.Website = website
	var employeeCount int32 = 1
	this.EmployeeCount = &employeeCount
	var employeeCountIt int32 = 1
	this.EmployeeCountIt = &employeeCountIt
	this.Pk = pk
	this.Sk = sk
	return &this
}

// NewCompanyEntityWithDefaults instantiates a new CompanyEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyEntityWithDefaults() *CompanyEntity {
	this := CompanyEntity{}
	var employeeCount int32 = 1
	this.EmployeeCount = &employeeCount
	var employeeCountIt int32 = 1
	this.EmployeeCountIt = &employeeCountIt
	return &this
}

// GetName returns the Name field value
func (o *CompanyEntity) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CompanyEntity) SetName(v string) {
	o.Name = v
}

// GetMainContact returns the MainContact field value
func (o *CompanyEntity) GetMainContact() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MainContact
}

// GetMainContactOk returns a tuple with the MainContact field value
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetMainContactOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MainContact, true
}

// SetMainContact sets field value
func (o *CompanyEntity) SetMainContact(v string) {
	o.MainContact = v
}

// GetWebsite returns the Website field value
func (o *CompanyEntity) GetWebsite() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Website
}

// GetWebsiteOk returns a tuple with the Website field value
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetWebsiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Website, true
}

// SetWebsite sets field value
func (o *CompanyEntity) SetWebsite(v string) {
	o.Website = v
}

// GetEmployeeCount returns the EmployeeCount field value if set, zero value otherwise.
func (o *CompanyEntity) GetEmployeeCount() int32 {
	if o == nil || o.EmployeeCount == nil {
		var ret int32
		return ret
	}
	return *o.EmployeeCount
}

// GetEmployeeCountOk returns a tuple with the EmployeeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetEmployeeCountOk() (*int32, bool) {
	if o == nil || o.EmployeeCount == nil {
		return nil, false
	}
	return o.EmployeeCount, true
}

// HasEmployeeCount returns a boolean if a field has been set.
func (o *CompanyEntity) HasEmployeeCount() bool {
	if o != nil && o.EmployeeCount != nil {
		return true
	}

	return false
}

// SetEmployeeCount gets a reference to the given int32 and assigns it to the EmployeeCount field.
func (o *CompanyEntity) SetEmployeeCount(v int32) {
	o.EmployeeCount = &v
}

// GetEmployeeCountIt returns the EmployeeCountIt field value if set, zero value otherwise.
func (o *CompanyEntity) GetEmployeeCountIt() int32 {
	if o == nil || o.EmployeeCountIt == nil {
		var ret int32
		return ret
	}
	return *o.EmployeeCountIt
}

// GetEmployeeCountItOk returns a tuple with the EmployeeCountIt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetEmployeeCountItOk() (*int32, bool) {
	if o == nil || o.EmployeeCountIt == nil {
		return nil, false
	}
	return o.EmployeeCountIt, true
}

// HasEmployeeCountIt returns a boolean if a field has been set.
func (o *CompanyEntity) HasEmployeeCountIt() bool {
	if o != nil && o.EmployeeCountIt != nil {
		return true
	}

	return false
}

// SetEmployeeCountIt gets a reference to the given int32 and assigns it to the EmployeeCountIt field.
func (o *CompanyEntity) SetEmployeeCountIt(v int32) {
	o.EmployeeCountIt = &v
}

// GetSector returns the Sector field value if set, zero value otherwise.
func (o *CompanyEntity) GetSector() CompanySector {
	if o == nil || o.Sector == nil {
		var ret CompanySector
		return ret
	}
	return *o.Sector
}

// GetSectorOk returns a tuple with the Sector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetSectorOk() (*CompanySector, bool) {
	if o == nil || o.Sector == nil {
		return nil, false
	}
	return o.Sector, true
}

// HasSector returns a boolean if a field has been set.
func (o *CompanyEntity) HasSector() bool {
	if o != nil && o.Sector != nil {
		return true
	}

	return false
}

// SetSector gets a reference to the given CompanySector and assigns it to the Sector field.
func (o *CompanyEntity) SetSector(v CompanySector) {
	o.Sector = &v
}

// GetVulnScanFrequency returns the VulnScanFrequency field value if set, zero value otherwise.
func (o *CompanyEntity) GetVulnScanFrequency() ScanFrequency {
	if o == nil || o.VulnScanFrequency == nil {
		var ret ScanFrequency
		return ret
	}
	return *o.VulnScanFrequency
}

// GetVulnScanFrequencyOk returns a tuple with the VulnScanFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetVulnScanFrequencyOk() (*ScanFrequency, bool) {
	if o == nil || o.VulnScanFrequency == nil {
		return nil, false
	}
	return o.VulnScanFrequency, true
}

// HasVulnScanFrequency returns a boolean if a field has been set.
func (o *CompanyEntity) HasVulnScanFrequency() bool {
	if o != nil && o.VulnScanFrequency != nil {
		return true
	}

	return false
}

// SetVulnScanFrequency gets a reference to the given ScanFrequency and assigns it to the VulnScanFrequency field.
func (o *CompanyEntity) SetVulnScanFrequency(v ScanFrequency) {
	o.VulnScanFrequency = &v
}

// GetPk returns the Pk field value
func (o *CompanyEntity) GetPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *CompanyEntity) SetPk(v string) {
	o.Pk = v
}

// GetSk returns the Sk field value
func (o *CompanyEntity) GetSk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sk
}

// GetSkOk returns a tuple with the Sk field value
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetSkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sk, true
}

// SetSk sets field value
func (o *CompanyEntity) SetSk(v string) {
	o.Sk = v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *CompanyEntity) GetEntityType() string {
	if o == nil || o.EntityType == nil {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetEntityTypeOk() (*string, bool) {
	if o == nil || o.EntityType == nil {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *CompanyEntity) HasEntityType() bool {
	if o != nil && o.EntityType != nil {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *CompanyEntity) SetEntityType(v string) {
	o.EntityType = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *CompanyEntity) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *CompanyEntity) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *CompanyEntity) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *CompanyEntity) GetUpdated() time.Time {
	if o == nil || o.Updated == nil {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *CompanyEntity) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *CompanyEntity) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *CompanyEntity) GetMetadata() map[string]interface{} {
	if o == nil || o.Metadata == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyEntity) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *CompanyEntity) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
func (o *CompanyEntity) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o CompanyEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["mainContact"] = o.MainContact
	}
	if true {
		toSerialize["website"] = o.Website
	}
	if o.EmployeeCount != nil {
		toSerialize["employeeCount"] = o.EmployeeCount
	}
	if o.EmployeeCountIt != nil {
		toSerialize["employeeCountIt"] = o.EmployeeCountIt
	}
	if o.Sector != nil {
		toSerialize["sector"] = o.Sector
	}
	if o.VulnScanFrequency != nil {
		toSerialize["vulnScanFrequency"] = o.VulnScanFrequency
	}
	if true {
		toSerialize["pk"] = o.Pk
	}
	if true {
		toSerialize["sk"] = o.Sk
	}
	if o.EntityType != nil {
		toSerialize["entityType"] = o.EntityType
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyEntity struct {
	value *CompanyEntity
	isSet bool
}

func (v NullableCompanyEntity) Get() *CompanyEntity {
	return v.value
}

func (v *NullableCompanyEntity) Set(val *CompanyEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyEntity(val *CompanyEntity) *NullableCompanyEntity {
	return &NullableCompanyEntity{value: val, isSet: true}
}

func (v NullableCompanyEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


