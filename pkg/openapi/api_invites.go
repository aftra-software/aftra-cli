/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// InvitesApiService InvitesApi service
type InvitesApiService service

type ApiAddInviteToCompanyRequest struct {
	ctx context.Context
	ApiService *InvitesApiService
	parentPk string
	invite *Invite
	identity *string
}

func (r ApiAddInviteToCompanyRequest) Invite(invite Invite) ApiAddInviteToCompanyRequest {
	r.invite = &invite
	return r
}

func (r ApiAddInviteToCompanyRequest) Identity(identity string) ApiAddInviteToCompanyRequest {
	r.identity = &identity
	return r
}

func (r ApiAddInviteToCompanyRequest) Execute() (*InviteEntity, *http.Response, error) {
	return r.ApiService.AddInviteToCompanyExecute(r)
}

/*
AddInviteToCompany Add Invite To Company

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @return ApiAddInviteToCompanyRequest
*/
func (a *InvitesApiService) AddInviteToCompany(ctx context.Context, parentPk string) ApiAddInviteToCompanyRequest {
	return ApiAddInviteToCompanyRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
	}
}

// Execute executes the request
//  @return InviteEntity
func (a *InvitesApiService) AddInviteToCompanyExecute(r ApiAddInviteToCompanyRequest) (*InviteEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InviteEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvitesApiService.AddInviteToCompany")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{parent_pk}/invites"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.invite == nil {
		return localVarReturnValue, nil, reportError("invite is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.invite
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAddUserToCompanyRequest struct {
	ctx context.Context
	ApiService *InvitesApiService
	parentPk string
	invitePk string
	identity *string
}

func (r ApiAddUserToCompanyRequest) Identity(identity string) ApiAddUserToCompanyRequest {
	r.identity = &identity
	return r
}

func (r ApiAddUserToCompanyRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.AddUserToCompanyExecute(r)
}

/*
AddUserToCompany Add User To Company

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @param invitePk
 @return ApiAddUserToCompanyRequest
*/
func (a *InvitesApiService) AddUserToCompany(ctx context.Context, parentPk string, invitePk string) ApiAddUserToCompanyRequest {
	return ApiAddUserToCompanyRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
		invitePk: invitePk,
	}
}

// Execute executes the request
//  @return interface{}
func (a *InvitesApiService) AddUserToCompanyExecute(r ApiAddUserToCompanyRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvitesApiService.AddUserToCompany")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{parent_pk}/invites/{invite_pk}/"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"invite_pk"+"}", url.PathEscape(parameterToString(r.invitePk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyInviteRequest struct {
	ctx context.Context
	ApiService *InvitesApiService
	parentPk string
	entityPk string
	identity *string
}

func (r ApiGetCompanyInviteRequest) Identity(identity string) ApiGetCompanyInviteRequest {
	r.identity = &identity
	return r
}

func (r ApiGetCompanyInviteRequest) Execute() (*InviteWithAssets, *http.Response, error) {
	return r.ApiService.GetCompanyInviteExecute(r)
}

/*
GetCompanyInvite Get Company Invite

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @param entityPk
 @return ApiGetCompanyInviteRequest
*/
func (a *InvitesApiService) GetCompanyInvite(ctx context.Context, parentPk string, entityPk string) ApiGetCompanyInviteRequest {
	return ApiGetCompanyInviteRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
		entityPk: entityPk,
	}
}

// Execute executes the request
//  @return InviteWithAssets
func (a *InvitesApiService) GetCompanyInviteExecute(r ApiGetCompanyInviteRequest) (*InviteWithAssets, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *InviteWithAssets
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvitesApiService.GetCompanyInvite")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{parent_pk}/invites/{entity_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_pk"+"}", url.PathEscape(parameterToString(r.entityPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCompanyInvitesRequest struct {
	ctx context.Context
	ApiService *InvitesApiService
	parentPk string
	search *string
	marker *string
	limit *int32
	identity *string
}

func (r ApiListCompanyInvitesRequest) Search(search string) ApiListCompanyInvitesRequest {
	r.search = &search
	return r
}

func (r ApiListCompanyInvitesRequest) Marker(marker string) ApiListCompanyInvitesRequest {
	r.marker = &marker
	return r
}

func (r ApiListCompanyInvitesRequest) Limit(limit int32) ApiListCompanyInvitesRequest {
	r.limit = &limit
	return r
}

func (r ApiListCompanyInvitesRequest) Identity(identity string) ApiListCompanyInvitesRequest {
	r.identity = &identity
	return r
}

func (r ApiListCompanyInvitesRequest) Execute() (*PaginatedEntityCollectionInviteEntity, *http.Response, error) {
	return r.ApiService.ListCompanyInvitesExecute(r)
}

/*
ListCompanyInvites List Company Invites

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @return ApiListCompanyInvitesRequest
*/
func (a *InvitesApiService) ListCompanyInvites(ctx context.Context, parentPk string) ApiListCompanyInvitesRequest {
	return ApiListCompanyInvitesRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
	}
}

// Execute executes the request
//  @return PaginatedEntityCollectionInviteEntity
func (a *InvitesApiService) ListCompanyInvitesExecute(r ApiListCompanyInvitesRequest) (*PaginatedEntityCollectionInviteEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedEntityCollectionInviteEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvitesApiService.ListCompanyInvites")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{parent_pk}/invites"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	if r.marker != nil {
		localVarQueryParams.Add("marker", parameterToString(*r.marker, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveCompanyInviteRequest struct {
	ctx context.Context
	ApiService *InvitesApiService
	parentPk string
	entityPk string
	identity *string
}

func (r ApiRemoveCompanyInviteRequest) Identity(identity string) ApiRemoveCompanyInviteRequest {
	r.identity = &identity
	return r
}

func (r ApiRemoveCompanyInviteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveCompanyInviteExecute(r)
}

/*
RemoveCompanyInvite Remove Company Invite

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @param entityPk
 @return ApiRemoveCompanyInviteRequest
*/
func (a *InvitesApiService) RemoveCompanyInvite(ctx context.Context, parentPk string, entityPk string) ApiRemoveCompanyInviteRequest {
	return ApiRemoveCompanyInviteRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
		entityPk: entityPk,
	}
}

// Execute executes the request
func (a *InvitesApiService) RemoveCompanyInviteExecute(r ApiRemoveCompanyInviteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvitesApiService.RemoveCompanyInvite")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{parent_pk}/invites/{entity_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_pk"+"}", url.PathEscape(parameterToString(r.entityPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateCompanyInviteRequest struct {
	ctx context.Context
	ApiService *InvitesApiService
	parentPk string
	entityPk string
	invite *Invite
	identity *string
}

func (r ApiUpdateCompanyInviteRequest) Invite(invite Invite) ApiUpdateCompanyInviteRequest {
	r.invite = &invite
	return r
}

func (r ApiUpdateCompanyInviteRequest) Identity(identity string) ApiUpdateCompanyInviteRequest {
	r.identity = &identity
	return r
}

func (r ApiUpdateCompanyInviteRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateCompanyInviteExecute(r)
}

/*
UpdateCompanyInvite Update Company Invite

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @param entityPk
 @return ApiUpdateCompanyInviteRequest
*/
func (a *InvitesApiService) UpdateCompanyInvite(ctx context.Context, parentPk string, entityPk string) ApiUpdateCompanyInviteRequest {
	return ApiUpdateCompanyInviteRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
		entityPk: entityPk,
	}
}

// Execute executes the request
func (a *InvitesApiService) UpdateCompanyInviteExecute(r ApiUpdateCompanyInviteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InvitesApiService.UpdateCompanyInvite")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{parent_pk}/invites/{entity_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_pk"+"}", url.PathEscape(parameterToString(r.entityPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.invite == nil {
		return nil, reportError("invite is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.invite
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
