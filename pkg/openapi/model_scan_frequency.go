/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ScanFrequency An enumeration.
type ScanFrequency string

// List of ScanFrequency
const (
	NEVER ScanFrequency = "NEVER"
	WEEKLY ScanFrequency = "WEEKLY"
	BIWEEKLY ScanFrequency = "BIWEEKLY"
	MONTHLY ScanFrequency = "MONTHLY"
)

// All allowed values of ScanFrequency enum
var AllowedScanFrequencyEnumValues = []ScanFrequency{
	"NEVER",
	"WEEKLY",
	"BIWEEKLY",
	"MONTHLY",
}

func (v *ScanFrequency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ScanFrequency(value)
	for _, existing := range AllowedScanFrequencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ScanFrequency", value)
}

// NewScanFrequencyFromValue returns a pointer to a valid ScanFrequency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScanFrequencyFromValue(v string) (*ScanFrequency, error) {
	ev := ScanFrequency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ScanFrequency: valid values are %v", v, AllowedScanFrequencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ScanFrequency) IsValid() bool {
	for _, existing := range AllowedScanFrequencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ScanFrequency value
func (v ScanFrequency) Ptr() *ScanFrequency {
	return &v
}

type NullableScanFrequency struct {
	value *ScanFrequency
	isSet bool
}

func (v NullableScanFrequency) Get() *ScanFrequency {
	return v.value
}

func (v *NullableScanFrequency) Set(val *ScanFrequency) {
	v.value = val
	v.isSet = true
}

func (v NullableScanFrequency) IsSet() bool {
	return v.isSet
}

func (v *NullableScanFrequency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScanFrequency(val *ScanFrequency) *NullableScanFrequency {
	return &NullableScanFrequency{value: val, isSet: true}
}

func (v NullableScanFrequency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScanFrequency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

