/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DNSScan struct for DNSScan
type DNSScan struct {
	SourceLookup string `json:"source_lookup"`
	Type *string `json:"type,omitempty"`
}

// NewDNSScan instantiates a new DNSScan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDNSScan(sourceLookup string) *DNSScan {
	this := DNSScan{}
	this.SourceLookup = sourceLookup
	var type_ string = "dns.whois"
	this.Type = &type_
	return &this
}

// NewDNSScanWithDefaults instantiates a new DNSScan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDNSScanWithDefaults() *DNSScan {
	this := DNSScan{}
	var type_ string = "dns.whois"
	this.Type = &type_
	return &this
}

// GetSourceLookup returns the SourceLookup field value
func (o *DNSScan) GetSourceLookup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceLookup
}

// GetSourceLookupOk returns a tuple with the SourceLookup field value
// and a boolean to check if the value has been set.
func (o *DNSScan) GetSourceLookupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceLookup, true
}

// SetSourceLookup sets field value
func (o *DNSScan) SetSourceLookup(v string) {
	o.SourceLookup = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DNSScan) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DNSScan) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DNSScan) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DNSScan) SetType(v string) {
	o.Type = &v
}

func (o DNSScan) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source_lookup"] = o.SourceLookup
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableDNSScan struct {
	value *DNSScan
	isSet bool
}

func (v NullableDNSScan) Get() *DNSScan {
	return v.value
}

func (v *NullableDNSScan) Set(val *DNSScan) {
	v.value = val
	v.isSet = true
}

func (v NullableDNSScan) IsSet() bool {
	return v.isSet
}

func (v *NullableDNSScan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDNSScan(val *DNSScan) *NullableDNSScan {
	return &NullableDNSScan{value: val, isSet: true}
}

func (v NullableDNSScan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDNSScan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


