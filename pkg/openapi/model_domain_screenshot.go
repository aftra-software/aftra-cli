/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DomainScreenshot struct for DomainScreenshot
type DomainScreenshot struct {
	HttpScreenshot *string `json:"http_screenshot,omitempty"`
	HttpsScreenshot *string `json:"https_screenshot,omitempty"`
}

// NewDomainScreenshot instantiates a new DomainScreenshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainScreenshot() *DomainScreenshot {
	this := DomainScreenshot{}
	return &this
}

// NewDomainScreenshotWithDefaults instantiates a new DomainScreenshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainScreenshotWithDefaults() *DomainScreenshot {
	this := DomainScreenshot{}
	return &this
}

// GetHttpScreenshot returns the HttpScreenshot field value if set, zero value otherwise.
func (o *DomainScreenshot) GetHttpScreenshot() string {
	if o == nil || o.HttpScreenshot == nil {
		var ret string
		return ret
	}
	return *o.HttpScreenshot
}

// GetHttpScreenshotOk returns a tuple with the HttpScreenshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainScreenshot) GetHttpScreenshotOk() (*string, bool) {
	if o == nil || o.HttpScreenshot == nil {
		return nil, false
	}
	return o.HttpScreenshot, true
}

// HasHttpScreenshot returns a boolean if a field has been set.
func (o *DomainScreenshot) HasHttpScreenshot() bool {
	if o != nil && o.HttpScreenshot != nil {
		return true
	}

	return false
}

// SetHttpScreenshot gets a reference to the given string and assigns it to the HttpScreenshot field.
func (o *DomainScreenshot) SetHttpScreenshot(v string) {
	o.HttpScreenshot = &v
}

// GetHttpsScreenshot returns the HttpsScreenshot field value if set, zero value otherwise.
func (o *DomainScreenshot) GetHttpsScreenshot() string {
	if o == nil || o.HttpsScreenshot == nil {
		var ret string
		return ret
	}
	return *o.HttpsScreenshot
}

// GetHttpsScreenshotOk returns a tuple with the HttpsScreenshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainScreenshot) GetHttpsScreenshotOk() (*string, bool) {
	if o == nil || o.HttpsScreenshot == nil {
		return nil, false
	}
	return o.HttpsScreenshot, true
}

// HasHttpsScreenshot returns a boolean if a field has been set.
func (o *DomainScreenshot) HasHttpsScreenshot() bool {
	if o != nil && o.HttpsScreenshot != nil {
		return true
	}

	return false
}

// SetHttpsScreenshot gets a reference to the given string and assigns it to the HttpsScreenshot field.
func (o *DomainScreenshot) SetHttpsScreenshot(v string) {
	o.HttpsScreenshot = &v
}

func (o DomainScreenshot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HttpScreenshot != nil {
		toSerialize["http_screenshot"] = o.HttpScreenshot
	}
	if o.HttpsScreenshot != nil {
		toSerialize["https_screenshot"] = o.HttpsScreenshot
	}
	return json.Marshal(toSerialize)
}

type NullableDomainScreenshot struct {
	value *DomainScreenshot
	isSet bool
}

func (v NullableDomainScreenshot) Get() *DomainScreenshot {
	return v.value
}

func (v *NullableDomainScreenshot) Set(val *DomainScreenshot) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainScreenshot) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainScreenshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainScreenshot(val *DomainScreenshot) *NullableDomainScreenshot {
	return &NullableDomainScreenshot{value: val, isSet: true}
}

func (v NullableDomainScreenshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainScreenshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


