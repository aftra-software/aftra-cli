/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Secret struct for Secret
type Secret struct {
	Type string `json:"type"`
	Secret string `json:"secret"`
	Filename string `json:"filename"`
	CommitHash string `json:"commit_hash"`
	LineNumber string `json:"line_number"`
	RepoUrl *string `json:"repo_url,omitempty"`
	Branch string `json:"branch"`
	Score *OpportunityScore `json:"score,omitempty"`
}

// NewSecret instantiates a new Secret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecret(type_ string, secret string, filename string, commitHash string, lineNumber string, branch string) *Secret {
	this := Secret{}
	this.Type = type_
	this.Secret = secret
	this.Filename = filename
	this.CommitHash = commitHash
	this.LineNumber = lineNumber
	var repoUrl string = ""
	this.RepoUrl = &repoUrl
	this.Branch = branch
	return &this
}

// NewSecretWithDefaults instantiates a new Secret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretWithDefaults() *Secret {
	this := Secret{}
	var repoUrl string = ""
	this.RepoUrl = &repoUrl
	return &this
}

// GetType returns the Type field value
func (o *Secret) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Secret) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Secret) SetType(v string) {
	o.Type = v
}

// GetSecret returns the Secret field value
func (o *Secret) GetSecret() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *Secret) GetSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *Secret) SetSecret(v string) {
	o.Secret = v
}

// GetFilename returns the Filename field value
func (o *Secret) GetFilename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value
// and a boolean to check if the value has been set.
func (o *Secret) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Filename, true
}

// SetFilename sets field value
func (o *Secret) SetFilename(v string) {
	o.Filename = v
}

// GetCommitHash returns the CommitHash field value
func (o *Secret) GetCommitHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value
// and a boolean to check if the value has been set.
func (o *Secret) GetCommitHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitHash, true
}

// SetCommitHash sets field value
func (o *Secret) SetCommitHash(v string) {
	o.CommitHash = v
}

// GetLineNumber returns the LineNumber field value
func (o *Secret) GetLineNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LineNumber
}

// GetLineNumberOk returns a tuple with the LineNumber field value
// and a boolean to check if the value has been set.
func (o *Secret) GetLineNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LineNumber, true
}

// SetLineNumber sets field value
func (o *Secret) SetLineNumber(v string) {
	o.LineNumber = v
}

// GetRepoUrl returns the RepoUrl field value if set, zero value otherwise.
func (o *Secret) GetRepoUrl() string {
	if o == nil || o.RepoUrl == nil {
		var ret string
		return ret
	}
	return *o.RepoUrl
}

// GetRepoUrlOk returns a tuple with the RepoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetRepoUrlOk() (*string, bool) {
	if o == nil || o.RepoUrl == nil {
		return nil, false
	}
	return o.RepoUrl, true
}

// HasRepoUrl returns a boolean if a field has been set.
func (o *Secret) HasRepoUrl() bool {
	if o != nil && o.RepoUrl != nil {
		return true
	}

	return false
}

// SetRepoUrl gets a reference to the given string and assigns it to the RepoUrl field.
func (o *Secret) SetRepoUrl(v string) {
	o.RepoUrl = &v
}

// GetBranch returns the Branch field value
func (o *Secret) GetBranch() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Branch
}

// GetBranchOk returns a tuple with the Branch field value
// and a boolean to check if the value has been set.
func (o *Secret) GetBranchOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Branch, true
}

// SetBranch sets field value
func (o *Secret) SetBranch(v string) {
	o.Branch = v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *Secret) GetScore() OpportunityScore {
	if o == nil || o.Score == nil {
		var ret OpportunityScore
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Secret) GetScoreOk() (*OpportunityScore, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *Secret) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given OpportunityScore and assigns it to the Score field.
func (o *Secret) SetScore(v OpportunityScore) {
	o.Score = &v
}

func (o Secret) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["secret"] = o.Secret
	}
	if true {
		toSerialize["filename"] = o.Filename
	}
	if true {
		toSerialize["commit_hash"] = o.CommitHash
	}
	if true {
		toSerialize["line_number"] = o.LineNumber
	}
	if o.RepoUrl != nil {
		toSerialize["repo_url"] = o.RepoUrl
	}
	if true {
		toSerialize["branch"] = o.Branch
	}
	if o.Score != nil {
		toSerialize["score"] = o.Score
	}
	return json.Marshal(toSerialize)
}

type NullableSecret struct {
	value *Secret
	isSet bool
}

func (v NullableSecret) Get() *Secret {
	return v.value
}

func (v *NullableSecret) Set(val *Secret) {
	v.value = val
	v.isSet = true
}

func (v NullableSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecret(val *Secret) *NullableSecret {
	return &NullableSecret{value: val, isSet: true}
}

func (v NullableSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


