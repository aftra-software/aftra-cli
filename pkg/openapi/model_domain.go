/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Domain struct for Domain
type Domain struct {
	Name string `json:"name"`
	ActiveScanFrequency *ScanFrequency `json:"activeScanFrequency,omitempty"`
}

// NewDomain instantiates a new Domain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomain(name string) *Domain {
	this := Domain{}
	this.Name = name
	return &this
}

// NewDomainWithDefaults instantiates a new Domain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainWithDefaults() *Domain {
	this := Domain{}
	return &this
}

// GetName returns the Name field value
func (o *Domain) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Domain) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Domain) SetName(v string) {
	o.Name = v
}

// GetActiveScanFrequency returns the ActiveScanFrequency field value if set, zero value otherwise.
func (o *Domain) GetActiveScanFrequency() ScanFrequency {
	if o == nil || o.ActiveScanFrequency == nil {
		var ret ScanFrequency
		return ret
	}
	return *o.ActiveScanFrequency
}

// GetActiveScanFrequencyOk returns a tuple with the ActiveScanFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Domain) GetActiveScanFrequencyOk() (*ScanFrequency, bool) {
	if o == nil || o.ActiveScanFrequency == nil {
		return nil, false
	}
	return o.ActiveScanFrequency, true
}

// HasActiveScanFrequency returns a boolean if a field has been set.
func (o *Domain) HasActiveScanFrequency() bool {
	if o != nil && o.ActiveScanFrequency != nil {
		return true
	}

	return false
}

// SetActiveScanFrequency gets a reference to the given ScanFrequency and assigns it to the ActiveScanFrequency field.
func (o *Domain) SetActiveScanFrequency(v ScanFrequency) {
	o.ActiveScanFrequency = &v
}

func (o Domain) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ActiveScanFrequency != nil {
		toSerialize["activeScanFrequency"] = o.ActiveScanFrequency
	}
	return json.Marshal(toSerialize)
}

type NullableDomain struct {
	value *Domain
	isSet bool
}

func (v NullableDomain) Get() *Domain {
	return v.value
}

func (v *NullableDomain) Set(val *Domain) {
	v.value = val
	v.isSet = true
}

func (v NullableDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomain(val *Domain) *NullableDomain {
	return &NullableDomain{value: val, isSet: true}
}

func (v NullableDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


