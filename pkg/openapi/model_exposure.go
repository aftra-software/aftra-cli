/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Exposure An enumeration.
type Exposure string

// List of Exposure
const (
	TOO_MANY_SERVICES Exposure = "too-many-services"
	HIGH_RISK_SERVICES Exposure = "high-risk-services"
)

// All allowed values of Exposure enum
var AllowedExposureEnumValues = []Exposure{
	"too-many-services",
	"high-risk-services",
}

func (v *Exposure) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Exposure(value)
	for _, existing := range AllowedExposureEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Exposure", value)
}

// NewExposureFromValue returns a pointer to a valid Exposure
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExposureFromValue(v string) (*Exposure, error) {
	ev := Exposure(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Exposure: valid values are %v", v, AllowedExposureEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Exposure) IsValid() bool {
	for _, existing := range AllowedExposureEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Exposure value
func (v Exposure) Ptr() *Exposure {
	return &v
}

type NullableExposure struct {
	value *Exposure
	isSet bool
}

func (v NullableExposure) Get() *Exposure {
	return v.value
}

func (v *NullableExposure) Set(val *Exposure) {
	v.value = val
	v.isSet = true
}

func (v NullableExposure) IsSet() bool {
	return v.isSet
}

func (v *NullableExposure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExposure(val *Exposure) *NullableExposure {
	return &NullableExposure{value: val, isSet: true}
}

func (v NullableExposure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExposure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

