/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PasswordLengthAnswer An enumeration.
type PasswordLengthAnswer string

// List of PasswordLengthAnswer
const (
	LONG PasswordLengthAnswer = "long"
	SHORT PasswordLengthAnswer = "short"
	NONE PasswordLengthAnswer = "none"
)

// All allowed values of PasswordLengthAnswer enum
var AllowedPasswordLengthAnswerEnumValues = []PasswordLengthAnswer{
	"long",
	"short",
	"none",
}

func (v *PasswordLengthAnswer) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PasswordLengthAnswer(value)
	for _, existing := range AllowedPasswordLengthAnswerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PasswordLengthAnswer", value)
}

// NewPasswordLengthAnswerFromValue returns a pointer to a valid PasswordLengthAnswer
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPasswordLengthAnswerFromValue(v string) (*PasswordLengthAnswer, error) {
	ev := PasswordLengthAnswer(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PasswordLengthAnswer: valid values are %v", v, AllowedPasswordLengthAnswerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PasswordLengthAnswer) IsValid() bool {
	for _, existing := range AllowedPasswordLengthAnswerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PasswordLengthAnswer value
func (v PasswordLengthAnswer) Ptr() *PasswordLengthAnswer {
	return &v
}

type NullablePasswordLengthAnswer struct {
	value *PasswordLengthAnswer
	isSet bool
}

func (v NullablePasswordLengthAnswer) Get() *PasswordLengthAnswer {
	return v.value
}

func (v *NullablePasswordLengthAnswer) Set(val *PasswordLengthAnswer) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordLengthAnswer) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordLengthAnswer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordLengthAnswer(val *PasswordLengthAnswer) *NullablePasswordLengthAnswer {
	return &NullablePasswordLengthAnswer{value: val, isSet: true}
}

func (v NullablePasswordLengthAnswer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordLengthAnswer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

