/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BackDates An enumeration.
type BackDates string

// List of BackDates
const (
	_1W BackDates = "1w"
	_1M BackDates = "1m"
	_3M BackDates = "3m"
	_6M BackDates = "6m"
	_1Y BackDates = "1y"
)

// All allowed values of BackDates enum
var AllowedBackDatesEnumValues = []BackDates{
	"1w",
	"1m",
	"3m",
	"6m",
	"1y",
}

func (v *BackDates) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BackDates(value)
	for _, existing := range AllowedBackDatesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BackDates", value)
}

// NewBackDatesFromValue returns a pointer to a valid BackDates
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBackDatesFromValue(v string) (*BackDates, error) {
	ev := BackDates(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BackDates: valid values are %v", v, AllowedBackDatesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BackDates) IsValid() bool {
	for _, existing := range AllowedBackDatesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BackDates value
func (v BackDates) Ptr() *BackDates {
	return &v
}

type NullableBackDates struct {
	value *BackDates
	isSet bool
}

func (v NullableBackDates) Get() *BackDates {
	return v.value
}

func (v *NullableBackDates) Set(val *BackDates) {
	v.value = val
	v.isSet = true
}

func (v NullableBackDates) IsSet() bool {
	return v.isSet
}

func (v *NullableBackDates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackDates(val *BackDates) *NullableBackDates {
	return &NullableBackDates{value: val, isSet: true}
}

func (v NullableBackDates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackDates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

