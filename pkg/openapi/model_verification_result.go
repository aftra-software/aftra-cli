/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// VerificationResult struct for VerificationResult
type VerificationResult struct {
	Verified bool `json:"verified"`
}

// NewVerificationResult instantiates a new VerificationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerificationResult(verified bool) *VerificationResult {
	this := VerificationResult{}
	this.Verified = verified
	return &this
}

// NewVerificationResultWithDefaults instantiates a new VerificationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerificationResultWithDefaults() *VerificationResult {
	this := VerificationResult{}
	return &this
}

// GetVerified returns the Verified field value
func (o *VerificationResult) GetVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value
// and a boolean to check if the value has been set.
func (o *VerificationResult) GetVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verified, true
}

// SetVerified sets field value
func (o *VerificationResult) SetVerified(v bool) {
	o.Verified = v
}

func (o VerificationResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["verified"] = o.Verified
	}
	return json.Marshal(toSerialize)
}

type NullableVerificationResult struct {
	value *VerificationResult
	isSet bool
}

func (v NullableVerificationResult) Get() *VerificationResult {
	return v.value
}

func (v *NullableVerificationResult) Set(val *VerificationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVerificationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVerificationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerificationResult(val *VerificationResult) *NullableVerificationResult {
	return &NullableVerificationResult{value: val, isSet: true}
}

func (v NullableVerificationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerificationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


