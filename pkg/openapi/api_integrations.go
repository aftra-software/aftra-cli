/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// IntegrationsApiService IntegrationsApi service
type IntegrationsApiService service

type ApiAwsApiIntegrationsAwsCompanyPkGetRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	companyPk string
	parentPk *string
	identity *string
}

func (r ApiAwsApiIntegrationsAwsCompanyPkGetRequest) ParentPk(parentPk string) ApiAwsApiIntegrationsAwsCompanyPkGetRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiAwsApiIntegrationsAwsCompanyPkGetRequest) Identity(identity string) ApiAwsApiIntegrationsAwsCompanyPkGetRequest {
	r.identity = &identity
	return r
}

func (r ApiAwsApiIntegrationsAwsCompanyPkGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.AwsApiIntegrationsAwsCompanyPkGetExecute(r)
}

/*
AwsApiIntegrationsAwsCompanyPkGet Aws

Initiate aws integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @return ApiAwsApiIntegrationsAwsCompanyPkGetRequest
*/
func (a *IntegrationsApiService) AwsApiIntegrationsAwsCompanyPkGet(ctx context.Context, companyPk string) ApiAwsApiIntegrationsAwsCompanyPkGetRequest {
	return ApiAwsApiIntegrationsAwsCompanyPkGetRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IntegrationsApiService) AwsApiIntegrationsAwsCompanyPkGetExecute(r ApiAwsApiIntegrationsAwsCompanyPkGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.AwsApiIntegrationsAwsCompanyPkGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/aws/{company_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAwsCallbackApiIntegrationsAwsCompanyPkUserPkPostRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	companyPk string
	userPk string
	aWSRoute53IntegrationCallbackData *AWSRoute53IntegrationCallbackData
}

func (r ApiAwsCallbackApiIntegrationsAwsCompanyPkUserPkPostRequest) AWSRoute53IntegrationCallbackData(aWSRoute53IntegrationCallbackData AWSRoute53IntegrationCallbackData) ApiAwsCallbackApiIntegrationsAwsCompanyPkUserPkPostRequest {
	r.aWSRoute53IntegrationCallbackData = &aWSRoute53IntegrationCallbackData
	return r
}

func (r ApiAwsCallbackApiIntegrationsAwsCompanyPkUserPkPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.AwsCallbackApiIntegrationsAwsCompanyPkUserPkPostExecute(r)
}

/*
AwsCallbackApiIntegrationsAwsCompanyPkUserPkPost Aws Callback

Callback for aws integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @param userPk
 @return ApiAwsCallbackApiIntegrationsAwsCompanyPkUserPkPostRequest
*/
func (a *IntegrationsApiService) AwsCallbackApiIntegrationsAwsCompanyPkUserPkPost(ctx context.Context, companyPk string, userPk string) ApiAwsCallbackApiIntegrationsAwsCompanyPkUserPkPostRequest {
	return ApiAwsCallbackApiIntegrationsAwsCompanyPkUserPkPostRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
		userPk: userPk,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IntegrationsApiService) AwsCallbackApiIntegrationsAwsCompanyPkUserPkPostExecute(r ApiAwsCallbackApiIntegrationsAwsCompanyPkUserPkPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.AwsCallbackApiIntegrationsAwsCompanyPkUserPkPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/aws/{company_pk}/{user_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_pk"+"}", url.PathEscape(parameterToString(r.userPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.aWSRoute53IntegrationCallbackData == nil {
		return localVarReturnValue, nil, reportError("aWSRoute53IntegrationCallbackData is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.aWSRoute53IntegrationCallbackData
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBitbucketApiIntegrationsBitbucketCompanyPkGetRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	companyPk string
	parentPk *string
	identity *string
}

func (r ApiBitbucketApiIntegrationsBitbucketCompanyPkGetRequest) ParentPk(parentPk string) ApiBitbucketApiIntegrationsBitbucketCompanyPkGetRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiBitbucketApiIntegrationsBitbucketCompanyPkGetRequest) Identity(identity string) ApiBitbucketApiIntegrationsBitbucketCompanyPkGetRequest {
	r.identity = &identity
	return r
}

func (r ApiBitbucketApiIntegrationsBitbucketCompanyPkGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.BitbucketApiIntegrationsBitbucketCompanyPkGetExecute(r)
}

/*
BitbucketApiIntegrationsBitbucketCompanyPkGet Bitbucket

Initiate bitbucket integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @return ApiBitbucketApiIntegrationsBitbucketCompanyPkGetRequest
*/
func (a *IntegrationsApiService) BitbucketApiIntegrationsBitbucketCompanyPkGet(ctx context.Context, companyPk string) ApiBitbucketApiIntegrationsBitbucketCompanyPkGetRequest {
	return ApiBitbucketApiIntegrationsBitbucketCompanyPkGetRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IntegrationsApiService) BitbucketApiIntegrationsBitbucketCompanyPkGetExecute(r ApiBitbucketApiIntegrationsBitbucketCompanyPkGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.BitbucketApiIntegrationsBitbucketCompanyPkGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/bitbucket/{company_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	state *string
	bitbucketState *string
	bitbucketCompany *string
	identity *string
}

func (r ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest) State(state string) ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest {
	r.state = &state
	return r
}

func (r ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest) BitbucketState(bitbucketState string) ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest {
	r.bitbucketState = &bitbucketState
	return r
}

func (r ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest) BitbucketCompany(bitbucketCompany string) ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest {
	r.bitbucketCompany = &bitbucketCompany
	return r
}

func (r ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest) Identity(identity string) ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest {
	r.identity = &identity
	return r
}

func (r ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.BitbucketCallbackApiIntegrationsBitbucketGetExecute(r)
}

/*
BitbucketCallbackApiIntegrationsBitbucketGet Bitbucket Callback

Callback for bitbucket integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest
*/
func (a *IntegrationsApiService) BitbucketCallbackApiIntegrationsBitbucketGet(ctx context.Context) ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest {
	return ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IntegrationsApiService) BitbucketCallbackApiIntegrationsBitbucketGetExecute(r ApiBitbucketCallbackApiIntegrationsBitbucketGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.BitbucketCallbackApiIntegrationsBitbucketGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/bitbucket"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.state == nil {
		return localVarReturnValue, nil, reportError("state is required and must be specified")
	}
	if r.bitbucketState == nil {
		return localVarReturnValue, nil, reportError("bitbucketState is required and must be specified")
	}
	if r.bitbucketCompany == nil {
		return localVarReturnValue, nil, reportError("bitbucketCompany is required and must be specified")
	}

	localVarQueryParams.Add("state", parameterToString(*r.state, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetCompanyIntegrationRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	parentPk string
	entityPk string
	identity *string
}

func (r ApiGetCompanyIntegrationRequest) Identity(identity string) ApiGetCompanyIntegrationRequest {
	r.identity = &identity
	return r
}

func (r ApiGetCompanyIntegrationRequest) Execute() (*IntegrationWithAssets, *http.Response, error) {
	return r.ApiService.GetCompanyIntegrationExecute(r)
}

/*
GetCompanyIntegration Get Company Integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @param entityPk
 @return ApiGetCompanyIntegrationRequest
*/
func (a *IntegrationsApiService) GetCompanyIntegration(ctx context.Context, parentPk string, entityPk string) ApiGetCompanyIntegrationRequest {
	return ApiGetCompanyIntegrationRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
		entityPk: entityPk,
	}
}

// Execute executes the request
//  @return IntegrationWithAssets
func (a *IntegrationsApiService) GetCompanyIntegrationExecute(r ApiGetCompanyIntegrationRequest) (*IntegrationWithAssets, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *IntegrationWithAssets
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.GetCompanyIntegration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/crud/{parent_pk}/{entity_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_pk"+"}", url.PathEscape(parameterToString(r.entityPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGithubApiIntegrationsGithubCompanyPkGetRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	companyPk string
	parentPk *string
	identity *string
}

func (r ApiGithubApiIntegrationsGithubCompanyPkGetRequest) ParentPk(parentPk string) ApiGithubApiIntegrationsGithubCompanyPkGetRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiGithubApiIntegrationsGithubCompanyPkGetRequest) Identity(identity string) ApiGithubApiIntegrationsGithubCompanyPkGetRequest {
	r.identity = &identity
	return r
}

func (r ApiGithubApiIntegrationsGithubCompanyPkGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GithubApiIntegrationsGithubCompanyPkGetExecute(r)
}

/*
GithubApiIntegrationsGithubCompanyPkGet Github

Initiate github integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @return ApiGithubApiIntegrationsGithubCompanyPkGetRequest
*/
func (a *IntegrationsApiService) GithubApiIntegrationsGithubCompanyPkGet(ctx context.Context, companyPk string) ApiGithubApiIntegrationsGithubCompanyPkGetRequest {
	return ApiGithubApiIntegrationsGithubCompanyPkGetRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IntegrationsApiService) GithubApiIntegrationsGithubCompanyPkGetExecute(r ApiGithubApiIntegrationsGithubCompanyPkGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.GithubApiIntegrationsGithubCompanyPkGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/github/{company_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGithubCallbackApiIntegrationsGithubGetRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	installationId *string
	githubCompany *string
	identity *string
}

func (r ApiGithubCallbackApiIntegrationsGithubGetRequest) InstallationId(installationId string) ApiGithubCallbackApiIntegrationsGithubGetRequest {
	r.installationId = &installationId
	return r
}

func (r ApiGithubCallbackApiIntegrationsGithubGetRequest) GithubCompany(githubCompany string) ApiGithubCallbackApiIntegrationsGithubGetRequest {
	r.githubCompany = &githubCompany
	return r
}

func (r ApiGithubCallbackApiIntegrationsGithubGetRequest) Identity(identity string) ApiGithubCallbackApiIntegrationsGithubGetRequest {
	r.identity = &identity
	return r
}

func (r ApiGithubCallbackApiIntegrationsGithubGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GithubCallbackApiIntegrationsGithubGetExecute(r)
}

/*
GithubCallbackApiIntegrationsGithubGet Github Callback

Callback for github integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGithubCallbackApiIntegrationsGithubGetRequest
*/
func (a *IntegrationsApiService) GithubCallbackApiIntegrationsGithubGet(ctx context.Context) ApiGithubCallbackApiIntegrationsGithubGetRequest {
	return ApiGithubCallbackApiIntegrationsGithubGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IntegrationsApiService) GithubCallbackApiIntegrationsGithubGetExecute(r ApiGithubCallbackApiIntegrationsGithubGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.GithubCallbackApiIntegrationsGithubGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/github"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.installationId == nil {
		return localVarReturnValue, nil, reportError("installationId is required and must be specified")
	}
	if r.githubCompany == nil {
		return localVarReturnValue, nil, reportError("githubCompany is required and must be specified")
	}

	localVarQueryParams.Add("installation_id", parameterToString(*r.installationId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGitlabApiIntegrationsGitlabCompanyPkGetRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	companyPk string
	parentPk *string
	identity *string
}

func (r ApiGitlabApiIntegrationsGitlabCompanyPkGetRequest) ParentPk(parentPk string) ApiGitlabApiIntegrationsGitlabCompanyPkGetRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiGitlabApiIntegrationsGitlabCompanyPkGetRequest) Identity(identity string) ApiGitlabApiIntegrationsGitlabCompanyPkGetRequest {
	r.identity = &identity
	return r
}

func (r ApiGitlabApiIntegrationsGitlabCompanyPkGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GitlabApiIntegrationsGitlabCompanyPkGetExecute(r)
}

/*
GitlabApiIntegrationsGitlabCompanyPkGet Gitlab

Initiate gitlab integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @return ApiGitlabApiIntegrationsGitlabCompanyPkGetRequest
*/
func (a *IntegrationsApiService) GitlabApiIntegrationsGitlabCompanyPkGet(ctx context.Context, companyPk string) ApiGitlabApiIntegrationsGitlabCompanyPkGetRequest {
	return ApiGitlabApiIntegrationsGitlabCompanyPkGetRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IntegrationsApiService) GitlabApiIntegrationsGitlabCompanyPkGetExecute(r ApiGitlabApiIntegrationsGitlabCompanyPkGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.GitlabApiIntegrationsGitlabCompanyPkGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/gitlab/{company_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGitlabCallbackApiIntegrationsGitlabGetRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	state *string
	gitlabState *string
	gitlabCompany *string
	identity *string
}

func (r ApiGitlabCallbackApiIntegrationsGitlabGetRequest) State(state string) ApiGitlabCallbackApiIntegrationsGitlabGetRequest {
	r.state = &state
	return r
}

func (r ApiGitlabCallbackApiIntegrationsGitlabGetRequest) GitlabState(gitlabState string) ApiGitlabCallbackApiIntegrationsGitlabGetRequest {
	r.gitlabState = &gitlabState
	return r
}

func (r ApiGitlabCallbackApiIntegrationsGitlabGetRequest) GitlabCompany(gitlabCompany string) ApiGitlabCallbackApiIntegrationsGitlabGetRequest {
	r.gitlabCompany = &gitlabCompany
	return r
}

func (r ApiGitlabCallbackApiIntegrationsGitlabGetRequest) Identity(identity string) ApiGitlabCallbackApiIntegrationsGitlabGetRequest {
	r.identity = &identity
	return r
}

func (r ApiGitlabCallbackApiIntegrationsGitlabGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GitlabCallbackApiIntegrationsGitlabGetExecute(r)
}

/*
GitlabCallbackApiIntegrationsGitlabGet Gitlab Callback

Callback for gitlab integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGitlabCallbackApiIntegrationsGitlabGetRequest
*/
func (a *IntegrationsApiService) GitlabCallbackApiIntegrationsGitlabGet(ctx context.Context) ApiGitlabCallbackApiIntegrationsGitlabGetRequest {
	return ApiGitlabCallbackApiIntegrationsGitlabGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IntegrationsApiService) GitlabCallbackApiIntegrationsGitlabGetExecute(r ApiGitlabCallbackApiIntegrationsGitlabGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.GitlabCallbackApiIntegrationsGitlabGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/gitlab"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.state == nil {
		return localVarReturnValue, nil, reportError("state is required and must be specified")
	}
	if r.gitlabState == nil {
		return localVarReturnValue, nil, reportError("gitlabState is required and must be specified")
	}
	if r.gitlabCompany == nil {
		return localVarReturnValue, nil, reportError("gitlabCompany is required and must be specified")
	}

	localVarQueryParams.Add("state", parameterToString(*r.state, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGetRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	companyPk string
	parentPk *string
	identity *string
}

func (r ApiGoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGetRequest) ParentPk(parentPk string) ApiGoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGetRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiGoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGetRequest) Identity(identity string) ApiGoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGetRequest {
	r.identity = &identity
	return r
}

func (r ApiGoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGetExecute(r)
}

/*
GoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGet Google Workspaces

Initiate google workspaces integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @return ApiGoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGetRequest
*/
func (a *IntegrationsApiService) GoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGet(ctx context.Context, companyPk string) ApiGoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGetRequest {
	return ApiGoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGetRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IntegrationsApiService) GoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGetExecute(r ApiGoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.GoogleWorkspacesApiIntegrationsGoogleWorkspacesCompanyPkGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/google-workspaces/{company_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	state *string
	code *string
	googleWorkspacesState *string
	googleWorkspacesCompany *string
	identity *string
}

func (r ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest) State(state string) ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest {
	r.state = &state
	return r
}

func (r ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest) Code(code string) ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest {
	r.code = &code
	return r
}

func (r ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest) GoogleWorkspacesState(googleWorkspacesState string) ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest {
	r.googleWorkspacesState = &googleWorkspacesState
	return r
}

func (r ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest) GoogleWorkspacesCompany(googleWorkspacesCompany string) ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest {
	r.googleWorkspacesCompany = &googleWorkspacesCompany
	return r
}

func (r ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest) Identity(identity string) ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest {
	r.identity = &identity
	return r
}

func (r ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.GoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetExecute(r)
}

/*
GoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGet Google Workspaces Callback

Callback for google workspaces integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest
*/
func (a *IntegrationsApiService) GoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGet(ctx context.Context) ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest {
	return ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IntegrationsApiService) GoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetExecute(r ApiGoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.GoogleWorkspacesCallbackApiIntegrationsGoogleWorkspacesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/google-workspaces"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.state == nil {
		return localVarReturnValue, nil, reportError("state is required and must be specified")
	}
	if r.code == nil {
		return localVarReturnValue, nil, reportError("code is required and must be specified")
	}
	if r.googleWorkspacesState == nil {
		return localVarReturnValue, nil, reportError("googleWorkspacesState is required and must be specified")
	}
	if r.googleWorkspacesCompany == nil {
		return localVarReturnValue, nil, reportError("googleWorkspacesCompany is required and must be specified")
	}

	localVarQueryParams.Add("state", parameterToString(*r.state, ""))
	localVarQueryParams.Add("code", parameterToString(*r.code, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListCompanyIntegrationsRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	parentPk string
	search *string
	marker *string
	limit *int32
	identity *string
}

func (r ApiListCompanyIntegrationsRequest) Search(search string) ApiListCompanyIntegrationsRequest {
	r.search = &search
	return r
}

func (r ApiListCompanyIntegrationsRequest) Marker(marker string) ApiListCompanyIntegrationsRequest {
	r.marker = &marker
	return r
}

func (r ApiListCompanyIntegrationsRequest) Limit(limit int32) ApiListCompanyIntegrationsRequest {
	r.limit = &limit
	return r
}

func (r ApiListCompanyIntegrationsRequest) Identity(identity string) ApiListCompanyIntegrationsRequest {
	r.identity = &identity
	return r
}

func (r ApiListCompanyIntegrationsRequest) Execute() (*PaginatedEntityCollectionIntegrationEntity, *http.Response, error) {
	return r.ApiService.ListCompanyIntegrationsExecute(r)
}

/*
ListCompanyIntegrations List Company Integrations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @return ApiListCompanyIntegrationsRequest
*/
func (a *IntegrationsApiService) ListCompanyIntegrations(ctx context.Context, parentPk string) ApiListCompanyIntegrationsRequest {
	return ApiListCompanyIntegrationsRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
	}
}

// Execute executes the request
//  @return PaginatedEntityCollectionIntegrationEntity
func (a *IntegrationsApiService) ListCompanyIntegrationsExecute(r ApiListCompanyIntegrationsRequest) (*PaginatedEntityCollectionIntegrationEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedEntityCollectionIntegrationEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.ListCompanyIntegrations")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/crud/{parent_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	if r.marker != nil {
		localVarQueryParams.Add("marker", parameterToString(*r.marker, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGetRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	companyPk string
	parentPk *string
	identity *string
}

func (r ApiMicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGetRequest) ParentPk(parentPk string) ApiMicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGetRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiMicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGetRequest) Identity(identity string) ApiMicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGetRequest {
	r.identity = &identity
	return r
}

func (r ApiMicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.MicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGetExecute(r)
}

/*
MicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGet Microsoft Azure Ad

Initiate microsoft azure AD integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @return ApiMicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGetRequest
*/
func (a *IntegrationsApiService) MicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGet(ctx context.Context, companyPk string) ApiMicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGetRequest {
	return ApiMicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGetRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IntegrationsApiService) MicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGetExecute(r ApiMicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.MicrosoftAzureAdApiIntegrationsMicrosoftAzureCompanyPkGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/microsoft-azure/{company_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	microsoftAzureAdFlow *string
	microsoftAzureAdCompany *string
	identity *string
}

func (r ApiMicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetRequest) MicrosoftAzureAdFlow(microsoftAzureAdFlow string) ApiMicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetRequest {
	r.microsoftAzureAdFlow = &microsoftAzureAdFlow
	return r
}

func (r ApiMicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetRequest) MicrosoftAzureAdCompany(microsoftAzureAdCompany string) ApiMicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetRequest {
	r.microsoftAzureAdCompany = &microsoftAzureAdCompany
	return r
}

func (r ApiMicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetRequest) Identity(identity string) ApiMicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetRequest {
	r.identity = &identity
	return r
}

func (r ApiMicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.MicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetExecute(r)
}

/*
MicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGet Microsoft Azure Ad Callback

Callback for microsoft azure AD integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetRequest
*/
func (a *IntegrationsApiService) MicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGet(ctx context.Context) ApiMicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetRequest {
	return ApiMicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return interface{}
func (a *IntegrationsApiService) MicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetExecute(r ApiMicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.MicrosoftAzureAdCallbackApiIntegrationsMicrosoftAzureGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/microsoft-azure"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.microsoftAzureAdFlow == nil {
		return localVarReturnValue, nil, reportError("microsoftAzureAdFlow is required and must be specified")
	}
	if r.microsoftAzureAdCompany == nil {
		return localVarReturnValue, nil, reportError("microsoftAzureAdCompany is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveCompanyIntegrationRequest struct {
	ctx context.Context
	ApiService *IntegrationsApiService
	parentPk string
	entityPk string
	identity *string
}

func (r ApiRemoveCompanyIntegrationRequest) Identity(identity string) ApiRemoveCompanyIntegrationRequest {
	r.identity = &identity
	return r
}

func (r ApiRemoveCompanyIntegrationRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveCompanyIntegrationExecute(r)
}

/*
RemoveCompanyIntegration Remove Company Integration

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @param entityPk
 @return ApiRemoveCompanyIntegrationRequest
*/
func (a *IntegrationsApiService) RemoveCompanyIntegration(ctx context.Context, parentPk string, entityPk string) ApiRemoveCompanyIntegrationRequest {
	return ApiRemoveCompanyIntegrationRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
		entityPk: entityPk,
	}
}

// Execute executes the request
func (a *IntegrationsApiService) RemoveCompanyIntegrationExecute(r ApiRemoveCompanyIntegrationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationsApiService.RemoveCompanyIntegration")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/integrations/crud/{parent_pk}/{entity_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_pk"+"}", url.PathEscape(parameterToString(r.entityPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
