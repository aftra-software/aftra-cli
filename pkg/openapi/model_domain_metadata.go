/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DomainMetadata struct for DomainMetadata
type DomainMetadata struct {
	SubdomainCount *int32 `json:"subdomainCount,omitempty"`
	SaasServices []string `json:"saasServices,omitempty"`
}

// NewDomainMetadata instantiates a new DomainMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainMetadata() *DomainMetadata {
	this := DomainMetadata{}
	var subdomainCount int32 = 0
	this.SubdomainCount = &subdomainCount
	return &this
}

// NewDomainMetadataWithDefaults instantiates a new DomainMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainMetadataWithDefaults() *DomainMetadata {
	this := DomainMetadata{}
	var subdomainCount int32 = 0
	this.SubdomainCount = &subdomainCount
	return &this
}

// GetSubdomainCount returns the SubdomainCount field value if set, zero value otherwise.
func (o *DomainMetadata) GetSubdomainCount() int32 {
	if o == nil || o.SubdomainCount == nil {
		var ret int32
		return ret
	}
	return *o.SubdomainCount
}

// GetSubdomainCountOk returns a tuple with the SubdomainCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainMetadata) GetSubdomainCountOk() (*int32, bool) {
	if o == nil || o.SubdomainCount == nil {
		return nil, false
	}
	return o.SubdomainCount, true
}

// HasSubdomainCount returns a boolean if a field has been set.
func (o *DomainMetadata) HasSubdomainCount() bool {
	if o != nil && o.SubdomainCount != nil {
		return true
	}

	return false
}

// SetSubdomainCount gets a reference to the given int32 and assigns it to the SubdomainCount field.
func (o *DomainMetadata) SetSubdomainCount(v int32) {
	o.SubdomainCount = &v
}

// GetSaasServices returns the SaasServices field value if set, zero value otherwise.
func (o *DomainMetadata) GetSaasServices() []string {
	if o == nil || o.SaasServices == nil {
		var ret []string
		return ret
	}
	return o.SaasServices
}

// GetSaasServicesOk returns a tuple with the SaasServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainMetadata) GetSaasServicesOk() ([]string, bool) {
	if o == nil || o.SaasServices == nil {
		return nil, false
	}
	return o.SaasServices, true
}

// HasSaasServices returns a boolean if a field has been set.
func (o *DomainMetadata) HasSaasServices() bool {
	if o != nil && o.SaasServices != nil {
		return true
	}

	return false
}

// SetSaasServices gets a reference to the given []string and assigns it to the SaasServices field.
func (o *DomainMetadata) SetSaasServices(v []string) {
	o.SaasServices = v
}

func (o DomainMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SubdomainCount != nil {
		toSerialize["subdomainCount"] = o.SubdomainCount
	}
	if o.SaasServices != nil {
		toSerialize["saasServices"] = o.SaasServices
	}
	return json.Marshal(toSerialize)
}

type NullableDomainMetadata struct {
	value *DomainMetadata
	isSet bool
}

func (v NullableDomainMetadata) Get() *DomainMetadata {
	return v.value
}

func (v *NullableDomainMetadata) Set(val *DomainMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainMetadata(val *DomainMetadata) *NullableDomainMetadata {
	return &NullableDomainMetadata{value: val, isSet: true}
}

func (v NullableDomainMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


