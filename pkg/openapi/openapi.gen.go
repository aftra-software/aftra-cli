// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	APIKeyHeaderScopes = "APIKeyHeader.Scopes"
	HTTPBearerScopes   = "HTTPBearer.Scopes"
)

// Defines values for OpportunityScore.
const (
	Critical OpportunityScore = "critical"
	High     OpportunityScore = "high"
	Info     OpportunityScore = "info"
	Low      OpportunityScore = "low"
	Medium   OpportunityScore = "medium"
	None     OpportunityScore = "none"
	Unknown  OpportunityScore = "unknown"
)

// CreateOpportunity defines model for CreateOpportunity.
type CreateOpportunity struct {
	Details map[string]string `json:"details"`
	Name    string            `json:"name"`

	// Score An enumeration.
	Score OpportunityScore `json:"score"`
	Uid   string           `json:"uid"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// OpportunityScore An enumeration.
type OpportunityScore string

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams defines parameters for CreateOpportunityApiCompaniesCompanyPkOpportunitiesPost.
type CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams struct {
	ParentPk *string `form:"parent_pk,omitempty" json:"parent_pk,omitempty"`
	Identity *string `form:"identity,omitempty" json:"identity,omitempty"`
}

// CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostJSONRequestBody defines body for CreateOpportunityApiCompaniesCompanyPkOpportunitiesPost for application/json ContentType.
type CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostJSONRequestBody = CreateOpportunity

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
