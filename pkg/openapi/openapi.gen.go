// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	APIKeyHeaderScopes = "APIKeyHeader.Scopes"
	HTTPBearerScopes   = "HTTPBearer.Scopes"
)

// Defines values for OpportunityScore.
const (
	Critical OpportunityScore = "critical"
	High     OpportunityScore = "high"
	Info     OpportunityScore = "info"
	Low      OpportunityScore = "low"
	Medium   OpportunityScore = "medium"
	None     OpportunityScore = "none"
	Unknown  OpportunityScore = "unknown"
)

// CreateOpportunity defines model for CreateOpportunity.
type CreateOpportunity struct {
	Details map[string]string `json:"details"`
	Name    string            `json:"name"`

	// Score An enumeration.
	Score OpportunityScore `json:"score"`
	Uid   string           `json:"uid"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// MaskedToken defines model for MaskedToken.
type MaskedToken struct {
	Company string `json:"company"`
	Config  string `json:"config"`
	Id      string `json:"id"`
	Name    string `json:"name"`
}

// OpportunityScore An enumeration.
type OpportunityScore string

// SubmitLogEvent defines model for SubmitLogEvent.
type SubmitLogEvent struct {
	Message   string `json:"message"`
	Timestamp int    `json:"timestamp"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams defines parameters for CreateOpportunityApiCompaniesCompanyPkOpportunitiesPost.
type CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams struct {
	ParentPk *string `form:"parent_pk,omitempty" json:"parent_pk,omitempty"`
	Identity *string `form:"identity,omitempty" json:"identity,omitempty"`
}

// SubmitLogsForTokenJSONBody defines parameters for SubmitLogsForToken.
type SubmitLogsForTokenJSONBody = []SubmitLogEvent

// CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostJSONRequestBody defines body for CreateOpportunityApiCompaniesCompanyPkOpportunitiesPost for application/json ContentType.
type CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostJSONRequestBody = CreateOpportunity

// SubmitLogsForTokenJSONRequestBody defines body for SubmitLogsForToken for application/json ContentType.
type SubmitLogsForTokenJSONRequestBody = SubmitLogsForTokenJSONBody

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateOpportunityApiCompaniesCompanyPkOpportunitiesPost request with any body
	CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostWithBody(ctx context.Context, companyPk string, params *CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOpportunityApiCompaniesCompanyPkOpportunitiesPost(ctx context.Context, companyPk string, params *CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams, body CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokenInfo request
	GetTokenInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SubmitLogsForToken request with any body
	SubmitLogsForTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SubmitLogsForToken(ctx context.Context, body SubmitLogsForTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostWithBody(ctx context.Context, companyPk string, params *CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOpportunityApiCompaniesCompanyPkOpportunitiesPostRequestWithBody(c.Server, companyPk, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOpportunityApiCompaniesCompanyPkOpportunitiesPost(ctx context.Context, companyPk string, params *CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams, body CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOpportunityApiCompaniesCompanyPkOpportunitiesPostRequest(c.Server, companyPk, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokenInfo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokenInfoRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitLogsForTokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitLogsForTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SubmitLogsForToken(ctx context.Context, body SubmitLogsForTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSubmitLogsForTokenRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateOpportunityApiCompaniesCompanyPkOpportunitiesPostRequest calls the generic CreateOpportunityApiCompaniesCompanyPkOpportunitiesPost builder with application/json body
func NewCreateOpportunityApiCompaniesCompanyPkOpportunitiesPostRequest(server string, companyPk string, params *CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams, body CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOpportunityApiCompaniesCompanyPkOpportunitiesPostRequestWithBody(server, companyPk, params, "application/json", bodyReader)
}

// NewCreateOpportunityApiCompaniesCompanyPkOpportunitiesPostRequestWithBody generates requests for CreateOpportunityApiCompaniesCompanyPkOpportunitiesPost with any type of body
func NewCreateOpportunityApiCompaniesCompanyPkOpportunitiesPostRequestWithBody(server string, companyPk string, params *CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "company_pk", runtime.ParamLocationPath, companyPk)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/companies/%s/opportunities/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ParentPk != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parent_pk", runtime.ParamLocationQuery, *params.ParentPk); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.Identity != nil {
		var cookieParam0 string

		cookieParam0, err = runtime.StyleParamWithLocation("simple", true, "identity", runtime.ParamLocationCookie, *params.Identity)
		if err != nil {
			return nil, err
		}

		cookie0 := &http.Cookie{
			Name:  "identity",
			Value: cookieParam0,
		}
		req.AddCookie(cookie0)
	}

	return req, nil
}

// NewGetTokenInfoRequest generates requests for GetTokenInfo
func NewGetTokenInfoRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/token/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSubmitLogsForTokenRequest calls the generic SubmitLogsForToken builder with application/json body
func NewSubmitLogsForTokenRequest(server string, body SubmitLogsForTokenJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSubmitLogsForTokenRequestWithBody(server, "application/json", bodyReader)
}

// NewSubmitLogsForTokenRequestWithBody generates requests for SubmitLogsForToken with any type of body
func NewSubmitLogsForTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/token/logs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateOpportunityApiCompaniesCompanyPkOpportunitiesPost request with any body
	CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostWithBodyWithResponse(ctx context.Context, companyPk string, params *CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse, error)

	CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostWithResponse(ctx context.Context, companyPk string, params *CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams, body CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse, error)

	// GetTokenInfo request
	GetTokenInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokenInfoResponse, error)

	// SubmitLogsForToken request with any body
	SubmitLogsForTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitLogsForTokenResponse, error)

	SubmitLogsForTokenWithResponse(ctx context.Context, body SubmitLogsForTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitLogsForTokenResponse, error)
}

type CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MaskedToken
}

// Status returns HTTPResponse.Status
func (r GetTokenInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SubmitLogsForTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r SubmitLogsForTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SubmitLogsForTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostWithBodyWithResponse request with arbitrary body returning *CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse
func (c *ClientWithResponses) CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostWithBodyWithResponse(ctx context.Context, companyPk string, params *CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse, error) {
	rsp, err := c.CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostWithBody(ctx, companyPk, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse(rsp)
}

func (c *ClientWithResponses) CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostWithResponse(ctx context.Context, companyPk string, params *CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostParams, body CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse, error) {
	rsp, err := c.CreateOpportunityApiCompaniesCompanyPkOpportunitiesPost(ctx, companyPk, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse(rsp)
}

// GetTokenInfoWithResponse request returning *GetTokenInfoResponse
func (c *ClientWithResponses) GetTokenInfoWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokenInfoResponse, error) {
	rsp, err := c.GetTokenInfo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokenInfoResponse(rsp)
}

// SubmitLogsForTokenWithBodyWithResponse request with arbitrary body returning *SubmitLogsForTokenResponse
func (c *ClientWithResponses) SubmitLogsForTokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SubmitLogsForTokenResponse, error) {
	rsp, err := c.SubmitLogsForTokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitLogsForTokenResponse(rsp)
}

func (c *ClientWithResponses) SubmitLogsForTokenWithResponse(ctx context.Context, body SubmitLogsForTokenJSONRequestBody, reqEditors ...RequestEditorFn) (*SubmitLogsForTokenResponse, error) {
	rsp, err := c.SubmitLogsForToken(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSubmitLogsForTokenResponse(rsp)
}

// ParseCreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse parses an HTTP response from a CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostWithResponse call
func ParseCreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse(rsp *http.Response) (*CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOpportunityApiCompaniesCompanyPkOpportunitiesPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetTokenInfoResponse parses an HTTP response from a GetTokenInfoWithResponse call
func ParseGetTokenInfoResponse(rsp *http.Response) (*GetTokenInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MaskedToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseSubmitLogsForTokenResponse parses an HTTP response from a SubmitLogsForTokenWithResponse call
func ParseSubmitLogsForTokenResponse(rsp *http.Response) (*SubmitLogsForTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SubmitLogsForTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
