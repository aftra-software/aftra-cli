/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AccountCampaignConclusion An enumeration.
type AccountCampaignConclusion string

// List of AccountCampaignConclusion
const (
	CREATED AccountCampaignConclusion = "CREATED"
	VIEWED AccountCampaignConclusion = "VIEWED"
	FINISHED AccountCampaignConclusion = "FINISHED"
)

// All allowed values of AccountCampaignConclusion enum
var AllowedAccountCampaignConclusionEnumValues = []AccountCampaignConclusion{
	"CREATED",
	"VIEWED",
	"FINISHED",
}

func (v *AccountCampaignConclusion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AccountCampaignConclusion(value)
	for _, existing := range AllowedAccountCampaignConclusionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AccountCampaignConclusion", value)
}

// NewAccountCampaignConclusionFromValue returns a pointer to a valid AccountCampaignConclusion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAccountCampaignConclusionFromValue(v string) (*AccountCampaignConclusion, error) {
	ev := AccountCampaignConclusion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AccountCampaignConclusion: valid values are %v", v, AllowedAccountCampaignConclusionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AccountCampaignConclusion) IsValid() bool {
	for _, existing := range AllowedAccountCampaignConclusionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AccountCampaignConclusion value
func (v AccountCampaignConclusion) Ptr() *AccountCampaignConclusion {
	return &v
}

type NullableAccountCampaignConclusion struct {
	value *AccountCampaignConclusion
	isSet bool
}

func (v NullableAccountCampaignConclusion) Get() *AccountCampaignConclusion {
	return v.value
}

func (v *NullableAccountCampaignConclusion) Set(val *AccountCampaignConclusion) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountCampaignConclusion) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountCampaignConclusion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountCampaignConclusion(val *AccountCampaignConclusion) *NullableAccountCampaignConclusion {
	return &NullableAccountCampaignConclusion{value: val, isSet: true}
}

func (v NullableAccountCampaignConclusion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountCampaignConclusion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

