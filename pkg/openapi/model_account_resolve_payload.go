/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AccountResolvePayload struct for AccountResolvePayload
type AccountResolvePayload struct {
	Acknowledge bool `json:"acknowledge"`
}

// NewAccountResolvePayload instantiates a new AccountResolvePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountResolvePayload(acknowledge bool) *AccountResolvePayload {
	this := AccountResolvePayload{}
	this.Acknowledge = acknowledge
	return &this
}

// NewAccountResolvePayloadWithDefaults instantiates a new AccountResolvePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountResolvePayloadWithDefaults() *AccountResolvePayload {
	this := AccountResolvePayload{}
	return &this
}

// GetAcknowledge returns the Acknowledge field value
func (o *AccountResolvePayload) GetAcknowledge() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Acknowledge
}

// GetAcknowledgeOk returns a tuple with the Acknowledge field value
// and a boolean to check if the value has been set.
func (o *AccountResolvePayload) GetAcknowledgeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Acknowledge, true
}

// SetAcknowledge sets field value
func (o *AccountResolvePayload) SetAcknowledge(v bool) {
	o.Acknowledge = v
}

func (o AccountResolvePayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["acknowledge"] = o.Acknowledge
	}
	return json.Marshal(toSerialize)
}

type NullableAccountResolvePayload struct {
	value *AccountResolvePayload
	isSet bool
}

func (v NullableAccountResolvePayload) Get() *AccountResolvePayload {
	return v.value
}

func (v *NullableAccountResolvePayload) Set(val *AccountResolvePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountResolvePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountResolvePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountResolvePayload(val *AccountResolvePayload) *NullableAccountResolvePayload {
	return &NullableAccountResolvePayload{value: val, isSet: true}
}

func (v NullableAccountResolvePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountResolvePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


