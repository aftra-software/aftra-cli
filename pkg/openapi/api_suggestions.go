/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SuggestionsApiService SuggestionsApi service
type SuggestionsApiService service

type ApiAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPostRequest struct {
	ctx context.Context
	ApiService *SuggestionsApiService
	companyPk string
	suggestionId string
	parentPk *string
	identity *string
}

func (r ApiAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPostRequest) ParentPk(parentPk string) ApiAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPostRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPostRequest) Identity(identity string) ApiAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPostRequest {
	r.identity = &identity
	return r
}

func (r ApiAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPostRequest) Execute() (*ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost, *http.Response, error) {
	return r.ApiService.AcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPostExecute(r)
}

/*
AcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost Accept Suggestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @param suggestionId
 @return ApiAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPostRequest
*/
func (a *SuggestionsApiService) AcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost(ctx context.Context, companyPk string, suggestionId string) ApiAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPostRequest {
	return ApiAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPostRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
		suggestionId: suggestionId,
	}
}

// Execute executes the request
//  @return ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost
func (a *SuggestionsApiService) AcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPostExecute(r ApiAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPostRequest) (*ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseAcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SuggestionsApiService.AcceptSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{company_pk}/suggestions/{suggestion_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"suggestion_id"+"}", url.PathEscape(parameterToString(r.suggestionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGetRequest struct {
	ctx context.Context
	ApiService *SuggestionsApiService
	companyPk string
	suggestionId string
	parentPk *string
	identity *string
}

func (r ApiGetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGetRequest) ParentPk(parentPk string) ApiGetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGetRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiGetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGetRequest) Identity(identity string) ApiGetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGetRequest {
	r.identity = &identity
	return r
}

func (r ApiGetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGetRequest) Execute() (*Suggestion, *http.Response, error) {
	return r.ApiService.GetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGetExecute(r)
}

/*
GetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGet Get Suggestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @param suggestionId
 @return ApiGetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGetRequest
*/
func (a *SuggestionsApiService) GetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGet(ctx context.Context, companyPk string, suggestionId string) ApiGetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGetRequest {
	return ApiGetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGetRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
		suggestionId: suggestionId,
	}
}

// Execute executes the request
//  @return Suggestion
func (a *SuggestionsApiService) GetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGetExecute(r ApiGetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGetRequest) (*Suggestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Suggestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SuggestionsApiService.GetSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{company_pk}/suggestions/{suggestion_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"suggestion_id"+"}", url.PathEscape(parameterToString(r.suggestionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSuggestionsApiCompaniesCompanyPkSuggestionsGetRequest struct {
	ctx context.Context
	ApiService *SuggestionsApiService
	companyPk string
	entityType *SuggestionEntityTypes
	parentPk *string
	identity *string
}

func (r ApiListSuggestionsApiCompaniesCompanyPkSuggestionsGetRequest) EntityType(entityType SuggestionEntityTypes) ApiListSuggestionsApiCompaniesCompanyPkSuggestionsGetRequest {
	r.entityType = &entityType
	return r
}

func (r ApiListSuggestionsApiCompaniesCompanyPkSuggestionsGetRequest) ParentPk(parentPk string) ApiListSuggestionsApiCompaniesCompanyPkSuggestionsGetRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiListSuggestionsApiCompaniesCompanyPkSuggestionsGetRequest) Identity(identity string) ApiListSuggestionsApiCompaniesCompanyPkSuggestionsGetRequest {
	r.identity = &identity
	return r
}

func (r ApiListSuggestionsApiCompaniesCompanyPkSuggestionsGetRequest) Execute() ([]Suggestion, *http.Response, error) {
	return r.ApiService.ListSuggestionsApiCompaniesCompanyPkSuggestionsGetExecute(r)
}

/*
ListSuggestionsApiCompaniesCompanyPkSuggestionsGet List Suggestions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @return ApiListSuggestionsApiCompaniesCompanyPkSuggestionsGetRequest
*/
func (a *SuggestionsApiService) ListSuggestionsApiCompaniesCompanyPkSuggestionsGet(ctx context.Context, companyPk string) ApiListSuggestionsApiCompaniesCompanyPkSuggestionsGetRequest {
	return ApiListSuggestionsApiCompaniesCompanyPkSuggestionsGetRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
	}
}

// Execute executes the request
//  @return []Suggestion
func (a *SuggestionsApiService) ListSuggestionsApiCompaniesCompanyPkSuggestionsGetExecute(r ApiListSuggestionsApiCompaniesCompanyPkSuggestionsGetRequest) ([]Suggestion, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Suggestion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SuggestionsApiService.ListSuggestionsApiCompaniesCompanyPkSuggestionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{company_pk}/suggestions/"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.entityType != nil {
		localVarQueryParams.Add("entity_type", parameterToString(*r.entityType, ""))
	}
	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDeleteRequest struct {
	ctx context.Context
	ApiService *SuggestionsApiService
	companyPk string
	suggestionId string
	parentPk *string
	identity *string
}

func (r ApiRejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDeleteRequest) ParentPk(parentPk string) ApiRejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDeleteRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiRejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDeleteRequest) Identity(identity string) ApiRejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDeleteRequest {
	r.identity = &identity
	return r
}

func (r ApiRejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.RejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDeleteExecute(r)
}

/*
RejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDelete Reject Suggestion

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @param suggestionId
 @return ApiRejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDeleteRequest
*/
func (a *SuggestionsApiService) RejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDelete(ctx context.Context, companyPk string, suggestionId string) ApiRejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDeleteRequest {
	return ApiRejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
		suggestionId: suggestionId,
	}
}

// Execute executes the request
func (a *SuggestionsApiService) RejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDeleteExecute(r ApiRejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SuggestionsApiService.RejectSuggestionApiCompaniesCompanyPkSuggestionsSuggestionIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{company_pk}/suggestions/{suggestion_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"suggestion_id"+"}", url.PathEscape(parameterToString(r.suggestionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
