/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// UserCompanyAccessEntity struct for UserCompanyAccessEntity
type UserCompanyAccessEntity struct {
	Pk string `json:"pk"`
	Sk string `json:"sk"`
	EntityType *string `json:"entityType,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	Name string `json:"name"`
	AccessType CompanyAccessEnum `json:"accessType"`
	Email string `json:"email"`
}

// NewUserCompanyAccessEntity instantiates a new UserCompanyAccessEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserCompanyAccessEntity(pk string, sk string, name string, accessType CompanyAccessEnum, email string) *UserCompanyAccessEntity {
	this := UserCompanyAccessEntity{}
	this.Pk = pk
	this.Sk = sk
	this.Name = name
	this.AccessType = accessType
	this.Email = email
	return &this
}

// NewUserCompanyAccessEntityWithDefaults instantiates a new UserCompanyAccessEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserCompanyAccessEntityWithDefaults() *UserCompanyAccessEntity {
	this := UserCompanyAccessEntity{}
	return &this
}

// GetPk returns the Pk field value
func (o *UserCompanyAccessEntity) GetPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *UserCompanyAccessEntity) GetPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *UserCompanyAccessEntity) SetPk(v string) {
	o.Pk = v
}

// GetSk returns the Sk field value
func (o *UserCompanyAccessEntity) GetSk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sk
}

// GetSkOk returns a tuple with the Sk field value
// and a boolean to check if the value has been set.
func (o *UserCompanyAccessEntity) GetSkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sk, true
}

// SetSk sets field value
func (o *UserCompanyAccessEntity) SetSk(v string) {
	o.Sk = v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *UserCompanyAccessEntity) GetEntityType() string {
	if o == nil || o.EntityType == nil {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCompanyAccessEntity) GetEntityTypeOk() (*string, bool) {
	if o == nil || o.EntityType == nil {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *UserCompanyAccessEntity) HasEntityType() bool {
	if o != nil && o.EntityType != nil {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *UserCompanyAccessEntity) SetEntityType(v string) {
	o.EntityType = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *UserCompanyAccessEntity) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCompanyAccessEntity) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *UserCompanyAccessEntity) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *UserCompanyAccessEntity) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *UserCompanyAccessEntity) GetUpdated() time.Time {
	if o == nil || o.Updated == nil {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserCompanyAccessEntity) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *UserCompanyAccessEntity) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *UserCompanyAccessEntity) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetName returns the Name field value
func (o *UserCompanyAccessEntity) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserCompanyAccessEntity) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserCompanyAccessEntity) SetName(v string) {
	o.Name = v
}

// GetAccessType returns the AccessType field value
func (o *UserCompanyAccessEntity) GetAccessType() CompanyAccessEnum {
	if o == nil {
		var ret CompanyAccessEnum
		return ret
	}

	return o.AccessType
}

// GetAccessTypeOk returns a tuple with the AccessType field value
// and a boolean to check if the value has been set.
func (o *UserCompanyAccessEntity) GetAccessTypeOk() (*CompanyAccessEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccessType, true
}

// SetAccessType sets field value
func (o *UserCompanyAccessEntity) SetAccessType(v CompanyAccessEnum) {
	o.AccessType = v
}

// GetEmail returns the Email field value
func (o *UserCompanyAccessEntity) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserCompanyAccessEntity) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserCompanyAccessEntity) SetEmail(v string) {
	o.Email = v
}

func (o UserCompanyAccessEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["pk"] = o.Pk
	}
	if true {
		toSerialize["sk"] = o.Sk
	}
	if o.EntityType != nil {
		toSerialize["entityType"] = o.EntityType
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["accessType"] = o.AccessType
	}
	if true {
		toSerialize["email"] = o.Email
	}
	return json.Marshal(toSerialize)
}

type NullableUserCompanyAccessEntity struct {
	value *UserCompanyAccessEntity
	isSet bool
}

func (v NullableUserCompanyAccessEntity) Get() *UserCompanyAccessEntity {
	return v.value
}

func (v *NullableUserCompanyAccessEntity) Set(val *UserCompanyAccessEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableUserCompanyAccessEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableUserCompanyAccessEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserCompanyAccessEntity(val *UserCompanyAccessEntity) *NullableUserCompanyAccessEntity {
	return &NullableUserCompanyAccessEntity{value: val, isSet: true}
}

func (v NullableUserCompanyAccessEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserCompanyAccessEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


