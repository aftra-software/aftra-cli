/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DisclosurePolicyAnswer An enumeration.
type DisclosurePolicyAnswer string

// List of DisclosurePolicyAnswer
const (
	YES DisclosurePolicyAnswer = "yes"
	NO DisclosurePolicyAnswer = "no"
)

// All allowed values of DisclosurePolicyAnswer enum
var AllowedDisclosurePolicyAnswerEnumValues = []DisclosurePolicyAnswer{
	"yes",
	"no",
}

func (v *DisclosurePolicyAnswer) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DisclosurePolicyAnswer(value)
	for _, existing := range AllowedDisclosurePolicyAnswerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DisclosurePolicyAnswer", value)
}

// NewDisclosurePolicyAnswerFromValue returns a pointer to a valid DisclosurePolicyAnswer
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDisclosurePolicyAnswerFromValue(v string) (*DisclosurePolicyAnswer, error) {
	ev := DisclosurePolicyAnswer(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DisclosurePolicyAnswer: valid values are %v", v, AllowedDisclosurePolicyAnswerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DisclosurePolicyAnswer) IsValid() bool {
	for _, existing := range AllowedDisclosurePolicyAnswerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DisclosurePolicyAnswer value
func (v DisclosurePolicyAnswer) Ptr() *DisclosurePolicyAnswer {
	return &v
}

type NullableDisclosurePolicyAnswer struct {
	value *DisclosurePolicyAnswer
	isSet bool
}

func (v NullableDisclosurePolicyAnswer) Get() *DisclosurePolicyAnswer {
	return v.value
}

func (v *NullableDisclosurePolicyAnswer) Set(val *DisclosurePolicyAnswer) {
	v.value = val
	v.isSet = true
}

func (v NullableDisclosurePolicyAnswer) IsSet() bool {
	return v.isSet
}

func (v *NullableDisclosurePolicyAnswer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisclosurePolicyAnswer(val *DisclosurePolicyAnswer) *NullableDisclosurePolicyAnswer {
	return &NullableDisclosurePolicyAnswer{value: val, isSet: true}
}

func (v NullableDisclosurePolicyAnswer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisclosurePolicyAnswer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

