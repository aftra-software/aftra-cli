/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// AccountCampaignsApiService AccountCampaignsApi service
type AccountCampaignsApiService service

type ApiGetAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkGetRequest struct {
	ctx context.Context
	ApiService *AccountCampaignsApiService
	campaignPk string
	campaignSk string
}

func (r ApiGetAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkGetRequest) Execute() (*AccountCampaignEntity, *http.Response, error) {
	return r.ApiService.GetAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkGetExecute(r)
}

/*
GetAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkGet Get Account Campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignPk
 @param campaignSk
 @return ApiGetAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkGetRequest
*/
func (a *AccountCampaignsApiService) GetAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkGet(ctx context.Context, campaignPk string, campaignSk string) ApiGetAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkGetRequest {
	return ApiGetAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkGetRequest{
		ApiService: a,
		ctx: ctx,
		campaignPk: campaignPk,
		campaignSk: campaignSk,
	}
}

// Execute executes the request
//  @return AccountCampaignEntity
func (a *AccountCampaignsApiService) GetAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkGetExecute(r ApiGetAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkGetRequest) (*AccountCampaignEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AccountCampaignEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountCampaignsApiService.GetAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/account-campaigns/{campaign_pk}/campaign/{campaign_sk}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_pk"+"}", url.PathEscape(parameterToString(r.campaignPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_sk"+"}", url.PathEscape(parameterToString(r.campaignSk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAccountCampaignLeaksInfoApiAccountCampaignsCampaignPkCampaignCampaignSkLeaksInfoGetRequest struct {
	ctx context.Context
	ApiService *AccountCampaignsApiService
	campaignPk string
	campaignSk string
}

func (r ApiGetAccountCampaignLeaksInfoApiAccountCampaignsCampaignPkCampaignCampaignSkLeaksInfoGetRequest) Execute() (*LeakInfo, *http.Response, error) {
	return r.ApiService.GetAccountCampaignLeaksInfoApiAccountCampaignsCampaignPkCampaignCampaignSkLeaksInfoGetExecute(r)
}

/*
GetAccountCampaignLeaksInfoApiAccountCampaignsCampaignPkCampaignCampaignSkLeaksInfoGet Get Account Campaign Leaks Info

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignPk
 @param campaignSk
 @return ApiGetAccountCampaignLeaksInfoApiAccountCampaignsCampaignPkCampaignCampaignSkLeaksInfoGetRequest
*/
func (a *AccountCampaignsApiService) GetAccountCampaignLeaksInfoApiAccountCampaignsCampaignPkCampaignCampaignSkLeaksInfoGet(ctx context.Context, campaignPk string, campaignSk string) ApiGetAccountCampaignLeaksInfoApiAccountCampaignsCampaignPkCampaignCampaignSkLeaksInfoGetRequest {
	return ApiGetAccountCampaignLeaksInfoApiAccountCampaignsCampaignPkCampaignCampaignSkLeaksInfoGetRequest{
		ApiService: a,
		ctx: ctx,
		campaignPk: campaignPk,
		campaignSk: campaignSk,
	}
}

// Execute executes the request
//  @return LeakInfo
func (a *AccountCampaignsApiService) GetAccountCampaignLeaksInfoApiAccountCampaignsCampaignPkCampaignCampaignSkLeaksInfoGetExecute(r ApiGetAccountCampaignLeaksInfoApiAccountCampaignsCampaignPkCampaignCampaignSkLeaksInfoGetRequest) (*LeakInfo, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *LeakInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountCampaignsApiService.GetAccountCampaignLeaksInfoApiAccountCampaignsCampaignPkCampaignCampaignSkLeaksInfoGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/account-campaigns/{campaign_pk}/campaign/{campaign_sk}/leaks-info"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_pk"+"}", url.PathEscape(parameterToString(r.campaignPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_sk"+"}", url.PathEscape(parameterToString(r.campaignSk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPostRequest struct {
	ctx context.Context
	ApiService *AccountCampaignsApiService
	campaignPk string
	campaignSk string
	accountResolvePayload *AccountResolvePayload
}

func (r ApiResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPostRequest) AccountResolvePayload(accountResolvePayload AccountResolvePayload) ApiResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPostRequest {
	r.accountResolvePayload = &accountResolvePayload
	return r
}

func (r ApiResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPostRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.ResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPostExecute(r)
}

/*
ResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPost Resolve Account Campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignPk
 @param campaignSk
 @return ApiResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPostRequest
*/
func (a *AccountCampaignsApiService) ResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPost(ctx context.Context, campaignPk string, campaignSk string) ApiResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPostRequest {
	return ApiResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPostRequest{
		ApiService: a,
		ctx: ctx,
		campaignPk: campaignPk,
		campaignSk: campaignSk,
	}
}

// Execute executes the request
//  @return interface{}
func (a *AccountCampaignsApiService) ResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPostExecute(r ApiResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPostRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountCampaignsApiService.ResolveAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/account-campaigns/{campaign_pk}/campaign/{campaign_sk}"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_pk"+"}", url.PathEscape(parameterToString(r.campaignPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_sk"+"}", url.PathEscape(parameterToString(r.campaignSk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.accountResolvePayload == nil {
		return localVarReturnValue, nil, reportError("accountResolvePayload is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.accountResolvePayload
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiViewAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkViewGetRequest struct {
	ctx context.Context
	ApiService *AccountCampaignsApiService
	campaignPk string
	campaignSk string
}

func (r ApiViewAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkViewGetRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.ViewAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkViewGetExecute(r)
}

/*
ViewAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkViewGet View Account Campaign

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param campaignPk
 @param campaignSk
 @return ApiViewAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkViewGetRequest
*/
func (a *AccountCampaignsApiService) ViewAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkViewGet(ctx context.Context, campaignPk string, campaignSk string) ApiViewAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkViewGetRequest {
	return ApiViewAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkViewGetRequest{
		ApiService: a,
		ctx: ctx,
		campaignPk: campaignPk,
		campaignSk: campaignSk,
	}
}

// Execute executes the request
//  @return interface{}
func (a *AccountCampaignsApiService) ViewAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkViewGetExecute(r ApiViewAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkViewGetRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AccountCampaignsApiService.ViewAccountCampaignApiAccountCampaignsCampaignPkCampaignCampaignSkViewGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/account-campaigns/{campaign_pk}/campaign/{campaign_sk}/view"
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_pk"+"}", url.PathEscape(parameterToString(r.campaignPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"campaign_sk"+"}", url.PathEscape(parameterToString(r.campaignSk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
