/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanySectorScore struct for CompanySectorScore
type CompanySectorScore struct {
	SectorMean int32 `json:"sector_mean"`
	ByGroup map[string]int32 `json:"by_group"`
}

// NewCompanySectorScore instantiates a new CompanySectorScore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanySectorScore(sectorMean int32, byGroup map[string]int32) *CompanySectorScore {
	this := CompanySectorScore{}
	this.SectorMean = sectorMean
	this.ByGroup = byGroup
	return &this
}

// NewCompanySectorScoreWithDefaults instantiates a new CompanySectorScore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanySectorScoreWithDefaults() *CompanySectorScore {
	this := CompanySectorScore{}
	return &this
}

// GetSectorMean returns the SectorMean field value
func (o *CompanySectorScore) GetSectorMean() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SectorMean
}

// GetSectorMeanOk returns a tuple with the SectorMean field value
// and a boolean to check if the value has been set.
func (o *CompanySectorScore) GetSectorMeanOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SectorMean, true
}

// SetSectorMean sets field value
func (o *CompanySectorScore) SetSectorMean(v int32) {
	o.SectorMean = v
}

// GetByGroup returns the ByGroup field value
func (o *CompanySectorScore) GetByGroup() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.ByGroup
}

// GetByGroupOk returns a tuple with the ByGroup field value
// and a boolean to check if the value has been set.
func (o *CompanySectorScore) GetByGroupOk() (*map[string]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ByGroup, true
}

// SetByGroup sets field value
func (o *CompanySectorScore) SetByGroup(v map[string]int32) {
	o.ByGroup = v
}

func (o CompanySectorScore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sector_mean"] = o.SectorMean
	}
	if true {
		toSerialize["by_group"] = o.ByGroup
	}
	return json.Marshal(toSerialize)
}

type NullableCompanySectorScore struct {
	value *CompanySectorScore
	isSet bool
}

func (v NullableCompanySectorScore) Get() *CompanySectorScore {
	return v.value
}

func (v *NullableCompanySectorScore) Set(val *CompanySectorScore) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanySectorScore) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanySectorScore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanySectorScore(val *CompanySectorScore) *NullableCompanySectorScore {
	return &NullableCompanySectorScore{value: val, isSet: true}
}

func (v NullableCompanySectorScore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanySectorScore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


