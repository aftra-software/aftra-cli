/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CompanyScore struct for CompanyScore
type CompanyScore struct {
	Type *string `json:"type,omitempty"`
	Company string `json:"company"`
	Date *string `json:"date,omitempty"`
	Total int32 `json:"total"`
	Breakdown map[string]int32 `json:"breakdown"`
	Ttl *float32 `json:"ttl,omitempty"`
}

// NewCompanyScore instantiates a new CompanyScore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompanyScore(company string, total int32, breakdown map[string]int32) *CompanyScore {
	this := CompanyScore{}
	var type_ string = "COMPANY_SCORE"
	this.Type = &type_
	this.Company = company
	this.Total = total
	this.Breakdown = breakdown
	return &this
}

// NewCompanyScoreWithDefaults instantiates a new CompanyScore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyScoreWithDefaults() *CompanyScore {
	this := CompanyScore{}
	var type_ string = "COMPANY_SCORE"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CompanyScore) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyScore) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CompanyScore) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CompanyScore) SetType(v string) {
	o.Type = &v
}

// GetCompany returns the Company field value
func (o *CompanyScore) GetCompany() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *CompanyScore) GetCompanyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *CompanyScore) SetCompany(v string) {
	o.Company = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *CompanyScore) GetDate() string {
	if o == nil || o.Date == nil {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyScore) GetDateOk() (*string, bool) {
	if o == nil || o.Date == nil {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *CompanyScore) HasDate() bool {
	if o != nil && o.Date != nil {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *CompanyScore) SetDate(v string) {
	o.Date = &v
}

// GetTotal returns the Total field value
func (o *CompanyScore) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *CompanyScore) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *CompanyScore) SetTotal(v int32) {
	o.Total = v
}

// GetBreakdown returns the Breakdown field value
func (o *CompanyScore) GetBreakdown() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.Breakdown
}

// GetBreakdownOk returns a tuple with the Breakdown field value
// and a boolean to check if the value has been set.
func (o *CompanyScore) GetBreakdownOk() (*map[string]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Breakdown, true
}

// SetBreakdown sets field value
func (o *CompanyScore) SetBreakdown(v map[string]int32) {
	o.Breakdown = v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *CompanyScore) GetTtl() float32 {
	if o == nil || o.Ttl == nil {
		var ret float32
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompanyScore) GetTtlOk() (*float32, bool) {
	if o == nil || o.Ttl == nil {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *CompanyScore) HasTtl() bool {
	if o != nil && o.Ttl != nil {
		return true
	}

	return false
}

// SetTtl gets a reference to the given float32 and assigns it to the Ttl field.
func (o *CompanyScore) SetTtl(v float32) {
	o.Ttl = &v
}

func (o CompanyScore) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["company"] = o.Company
	}
	if o.Date != nil {
		toSerialize["date"] = o.Date
	}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["breakdown"] = o.Breakdown
	}
	if o.Ttl != nil {
		toSerialize["ttl"] = o.Ttl
	}
	return json.Marshal(toSerialize)
}

type NullableCompanyScore struct {
	value *CompanyScore
	isSet bool
}

func (v NullableCompanyScore) Get() *CompanyScore {
	return v.value
}

func (v *NullableCompanyScore) Set(val *CompanyScore) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyScore) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyScore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyScore(val *CompanyScore) *NullableCompanyScore {
	return &NullableCompanyScore{value: val, isSet: true}
}

func (v NullableCompanyScore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyScore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


