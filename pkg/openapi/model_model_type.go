/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ModelType An enumeration.
type ModelType string

// List of ModelType
const (
	EXPOSED_SECRET ModelType = "exposed_secret"
	EXPOSED_SERVICE ModelType = "exposed_service"
	LEAKED_PASSWORD ModelType = "leaked_password"
	WEB_APP_VULNERABILITY ModelType = "web_app_vulnerability"
	BURP_VULNERABILITY ModelType = "burp_vulnerability"
	ACCOUNT_DISCOVERABILITY ModelType = "account_discoverability"
	SUSPICIOUS_DOMAIN ModelType = "suspicious_domain"
	GREENBONE_VULNERABILITY ModelType = "greenbone_vulnerability"
	INTERNAL ModelType = "internal"
)

// All allowed values of ModelType enum
var AllowedModelTypeEnumValues = []ModelType{
	"exposed_secret",
	"exposed_service",
	"leaked_password",
	"web_app_vulnerability",
	"burp_vulnerability",
	"account_discoverability",
	"suspicious_domain",
	"greenbone_vulnerability",
	"internal",
}

func (v *ModelType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModelType(value)
	for _, existing := range AllowedModelTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModelType", value)
}

// NewModelTypeFromValue returns a pointer to a valid ModelType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModelTypeFromValue(v string) (*ModelType, error) {
	ev := ModelType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModelType: valid values are %v", v, AllowedModelTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModelType) IsValid() bool {
	for _, existing := range AllowedModelTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModelType value
func (v ModelType) Ptr() *ModelType {
	return &v
}

type NullableModelType struct {
	value *ModelType
	isSet bool
}

func (v NullableModelType) Get() *ModelType {
	return v.value
}

func (v *NullableModelType) Set(val *ModelType) {
	v.value = val
	v.isSet = true
}

func (v NullableModelType) IsSet() bool {
	return v.isSet
}

func (v *NullableModelType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelType(val *ModelType) *NullableModelType {
	return &NullableModelType{value: val, isSet: true}
}

func (v NullableModelType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

