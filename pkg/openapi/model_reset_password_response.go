/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResetPasswordResponse struct for ResetPasswordResponse
type ResetPasswordResponse struct {
	Success bool `json:"success"`
	Reason *string `json:"reason,omitempty"`
}

// NewResetPasswordResponse instantiates a new ResetPasswordResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResetPasswordResponse(success bool) *ResetPasswordResponse {
	this := ResetPasswordResponse{}
	this.Success = success
	return &this
}

// NewResetPasswordResponseWithDefaults instantiates a new ResetPasswordResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResetPasswordResponseWithDefaults() *ResetPasswordResponse {
	this := ResetPasswordResponse{}
	return &this
}

// GetSuccess returns the Success field value
func (o *ResetPasswordResponse) GetSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Success
}

// GetSuccessOk returns a tuple with the Success field value
// and a boolean to check if the value has been set.
func (o *ResetPasswordResponse) GetSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Success, true
}

// SetSuccess sets field value
func (o *ResetPasswordResponse) SetSuccess(v bool) {
	o.Success = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ResetPasswordResponse) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResetPasswordResponse) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ResetPasswordResponse) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ResetPasswordResponse) SetReason(v string) {
	o.Reason = &v
}

func (o ResetPasswordResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["success"] = o.Success
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	return json.Marshal(toSerialize)
}

type NullableResetPasswordResponse struct {
	value *ResetPasswordResponse
	isSet bool
}

func (v NullableResetPasswordResponse) Get() *ResetPasswordResponse {
	return v.value
}

func (v *NullableResetPasswordResponse) Set(val *ResetPasswordResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableResetPasswordResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResetPasswordResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResetPasswordResponse(val *ResetPasswordResponse) *NullableResetPasswordResponse {
	return &NullableResetPasswordResponse{value: val, isSet: true}
}

func (v NullableResetPasswordResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResetPasswordResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


