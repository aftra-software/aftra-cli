/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RepositoryWithAssets struct for RepositoryWithAssets
type RepositoryWithAssets struct {
	Assets PaginatedEntityCollectionMetaEntity `json:"assets"`
	Entity RepositoryEntity `json:"entity"`
}

// NewRepositoryWithAssets instantiates a new RepositoryWithAssets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryWithAssets(assets PaginatedEntityCollectionMetaEntity, entity RepositoryEntity) *RepositoryWithAssets {
	this := RepositoryWithAssets{}
	this.Assets = assets
	this.Entity = entity
	return &this
}

// NewRepositoryWithAssetsWithDefaults instantiates a new RepositoryWithAssets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryWithAssetsWithDefaults() *RepositoryWithAssets {
	this := RepositoryWithAssets{}
	return &this
}

// GetAssets returns the Assets field value
func (o *RepositoryWithAssets) GetAssets() PaginatedEntityCollectionMetaEntity {
	if o == nil {
		var ret PaginatedEntityCollectionMetaEntity
		return ret
	}

	return o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value
// and a boolean to check if the value has been set.
func (o *RepositoryWithAssets) GetAssetsOk() (*PaginatedEntityCollectionMetaEntity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Assets, true
}

// SetAssets sets field value
func (o *RepositoryWithAssets) SetAssets(v PaginatedEntityCollectionMetaEntity) {
	o.Assets = v
}

// GetEntity returns the Entity field value
func (o *RepositoryWithAssets) GetEntity() RepositoryEntity {
	if o == nil {
		var ret RepositoryEntity
		return ret
	}

	return o.Entity
}

// GetEntityOk returns a tuple with the Entity field value
// and a boolean to check if the value has been set.
func (o *RepositoryWithAssets) GetEntityOk() (*RepositoryEntity, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entity, true
}

// SetEntity sets field value
func (o *RepositoryWithAssets) SetEntity(v RepositoryEntity) {
	o.Entity = v
}

func (o RepositoryWithAssets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["assets"] = o.Assets
	}
	if true {
		toSerialize["entity"] = o.Entity
	}
	return json.Marshal(toSerialize)
}

type NullableRepositoryWithAssets struct {
	value *RepositoryWithAssets
	isSet bool
}

func (v NullableRepositoryWithAssets) Get() *RepositoryWithAssets {
	return v.value
}

func (v *NullableRepositoryWithAssets) Set(val *RepositoryWithAssets) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryWithAssets) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryWithAssets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryWithAssets(val *RepositoryWithAssets) *NullableRepositoryWithAssets {
	return &NullableRepositoryWithAssets{value: val, isSet: true}
}

func (v NullableRepositoryWithAssets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryWithAssets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


