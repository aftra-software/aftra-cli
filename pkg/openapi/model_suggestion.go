/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Suggestion struct for Suggestion
type Suggestion struct {
	Data map[string]interface{} `json:"data"`
	Id string `json:"id"`
	Name string `json:"name"`
	EntityType SuggestionEntityTypes `json:"entityType"`
	Pk string `json:"pk"`
}

// NewSuggestion instantiates a new Suggestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuggestion(data map[string]interface{}, id string, name string, entityType SuggestionEntityTypes, pk string) *Suggestion {
	this := Suggestion{}
	this.Data = data
	this.Id = id
	this.Name = name
	this.EntityType = entityType
	this.Pk = pk
	return &this
}

// NewSuggestionWithDefaults instantiates a new Suggestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuggestionWithDefaults() *Suggestion {
	this := Suggestion{}
	var id string = ""
	this.Id = id
	return &this
}

// GetData returns the Data field value
func (o *Suggestion) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetDataOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *Suggestion) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetId returns the Id field value
func (o *Suggestion) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Suggestion) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Suggestion) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Suggestion) SetName(v string) {
	o.Name = v
}

// GetEntityType returns the EntityType field value
func (o *Suggestion) GetEntityType() SuggestionEntityTypes {
	if o == nil {
		var ret SuggestionEntityTypes
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetEntityTypeOk() (*SuggestionEntityTypes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *Suggestion) SetEntityType(v SuggestionEntityTypes) {
	o.EntityType = v
}

// GetPk returns the Pk field value
func (o *Suggestion) GetPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *Suggestion) GetPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *Suggestion) SetPk(v string) {
	o.Pk = v
}

func (o Suggestion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["entityType"] = o.EntityType
	}
	if true {
		toSerialize["pk"] = o.Pk
	}
	return json.Marshal(toSerialize)
}

type NullableSuggestion struct {
	value *Suggestion
	isSet bool
}

func (v NullableSuggestion) Get() *Suggestion {
	return v.value
}

func (v *NullableSuggestion) Set(val *Suggestion) {
	v.value = val
	v.isSet = true
}

func (v NullableSuggestion) IsSet() bool {
	return v.isSet
}

func (v *NullableSuggestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuggestion(val *Suggestion) *NullableSuggestion {
	return &NullableSuggestion{value: val, isSet: true}
}

func (v NullableSuggestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuggestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


