/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VIPAnswer An enumeration.
type VIPAnswer string

// List of VIPAnswer
const (
	YES VIPAnswer = "yes"
	NO VIPAnswer = "no"
)

// All allowed values of VIPAnswer enum
var AllowedVIPAnswerEnumValues = []VIPAnswer{
	"yes",
	"no",
}

func (v *VIPAnswer) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VIPAnswer(value)
	for _, existing := range AllowedVIPAnswerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VIPAnswer", value)
}

// NewVIPAnswerFromValue returns a pointer to a valid VIPAnswer
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVIPAnswerFromValue(v string) (*VIPAnswer, error) {
	ev := VIPAnswer(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VIPAnswer: valid values are %v", v, AllowedVIPAnswerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VIPAnswer) IsValid() bool {
	for _, existing := range AllowedVIPAnswerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VIPAnswer value
func (v VIPAnswer) Ptr() *VIPAnswer {
	return &v
}

type NullableVIPAnswer struct {
	value *VIPAnswer
	isSet bool
}

func (v NullableVIPAnswer) Get() *VIPAnswer {
	return v.value
}

func (v *NullableVIPAnswer) Set(val *VIPAnswer) {
	v.value = val
	v.isSet = true
}

func (v NullableVIPAnswer) IsSet() bool {
	return v.isSet
}

func (v *NullableVIPAnswer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVIPAnswer(val *VIPAnswer) *NullableVIPAnswer {
	return &NullableVIPAnswer{value: val, isSet: true}
}

func (v NullableVIPAnswer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVIPAnswer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

