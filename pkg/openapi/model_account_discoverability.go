/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AccountDiscoverability struct for AccountDiscoverability
type AccountDiscoverability struct {
	Company string `json:"company"`
	Uid *string `json:"uid,omitempty"`
	Type *string `json:"type,omitempty"`
	Group *string `json:"group,omitempty"`
	Entity *string `json:"entity,omitempty"`
	Score *OpportunityScore `json:"score,omitempty"`
	Resolution *OpportunityResolution `json:"resolution,omitempty"`
	Name *string `json:"name,omitempty"`
	AccountsCount int32 `json:"accounts_count"`
	AccountsRatio float32 `json:"accounts_ratio"`
	AccountsBySource map[string]int32 `json:"accounts_by_source"`
}

// NewAccountDiscoverability instantiates a new AccountDiscoverability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountDiscoverability(company string, accountsCount int32, accountsRatio float32, accountsBySource map[string]int32) *AccountDiscoverability {
	this := AccountDiscoverability{}
	this.Company = company
	var uid string = "account_discoverability"
	this.Uid = &uid
	var type_ string = "account_discoverability"
	this.Type = &type_
	var group string = "human_exposure"
	this.Group = &group
	this.AccountsCount = accountsCount
	this.AccountsRatio = accountsRatio
	this.AccountsBySource = accountsBySource
	return &this
}

// NewAccountDiscoverabilityWithDefaults instantiates a new AccountDiscoverability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountDiscoverabilityWithDefaults() *AccountDiscoverability {
	this := AccountDiscoverability{}
	var uid string = "account_discoverability"
	this.Uid = &uid
	var type_ string = "account_discoverability"
	this.Type = &type_
	var group string = "human_exposure"
	this.Group = &group
	return &this
}

// GetCompany returns the Company field value
func (o *AccountDiscoverability) GetCompany() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *AccountDiscoverability) GetCompanyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *AccountDiscoverability) SetCompany(v string) {
	o.Company = v
}

// GetUid returns the Uid field value if set, zero value otherwise.
func (o *AccountDiscoverability) GetUid() string {
	if o == nil || o.Uid == nil {
		var ret string
		return ret
	}
	return *o.Uid
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDiscoverability) GetUidOk() (*string, bool) {
	if o == nil || o.Uid == nil {
		return nil, false
	}
	return o.Uid, true
}

// HasUid returns a boolean if a field has been set.
func (o *AccountDiscoverability) HasUid() bool {
	if o != nil && o.Uid != nil {
		return true
	}

	return false
}

// SetUid gets a reference to the given string and assigns it to the Uid field.
func (o *AccountDiscoverability) SetUid(v string) {
	o.Uid = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AccountDiscoverability) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDiscoverability) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AccountDiscoverability) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AccountDiscoverability) SetType(v string) {
	o.Type = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *AccountDiscoverability) GetGroup() string {
	if o == nil || o.Group == nil {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDiscoverability) GetGroupOk() (*string, bool) {
	if o == nil || o.Group == nil {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *AccountDiscoverability) HasGroup() bool {
	if o != nil && o.Group != nil {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *AccountDiscoverability) SetGroup(v string) {
	o.Group = &v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *AccountDiscoverability) GetEntity() string {
	if o == nil || o.Entity == nil {
		var ret string
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDiscoverability) GetEntityOk() (*string, bool) {
	if o == nil || o.Entity == nil {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *AccountDiscoverability) HasEntity() bool {
	if o != nil && o.Entity != nil {
		return true
	}

	return false
}

// SetEntity gets a reference to the given string and assigns it to the Entity field.
func (o *AccountDiscoverability) SetEntity(v string) {
	o.Entity = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *AccountDiscoverability) GetScore() OpportunityScore {
	if o == nil || o.Score == nil {
		var ret OpportunityScore
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDiscoverability) GetScoreOk() (*OpportunityScore, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *AccountDiscoverability) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given OpportunityScore and assigns it to the Score field.
func (o *AccountDiscoverability) SetScore(v OpportunityScore) {
	o.Score = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *AccountDiscoverability) GetResolution() OpportunityResolution {
	if o == nil || o.Resolution == nil {
		var ret OpportunityResolution
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDiscoverability) GetResolutionOk() (*OpportunityResolution, bool) {
	if o == nil || o.Resolution == nil {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *AccountDiscoverability) HasResolution() bool {
	if o != nil && o.Resolution != nil {
		return true
	}

	return false
}

// SetResolution gets a reference to the given OpportunityResolution and assigns it to the Resolution field.
func (o *AccountDiscoverability) SetResolution(v OpportunityResolution) {
	o.Resolution = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccountDiscoverability) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountDiscoverability) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccountDiscoverability) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccountDiscoverability) SetName(v string) {
	o.Name = &v
}

// GetAccountsCount returns the AccountsCount field value
func (o *AccountDiscoverability) GetAccountsCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AccountsCount
}

// GetAccountsCountOk returns a tuple with the AccountsCount field value
// and a boolean to check if the value has been set.
func (o *AccountDiscoverability) GetAccountsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountsCount, true
}

// SetAccountsCount sets field value
func (o *AccountDiscoverability) SetAccountsCount(v int32) {
	o.AccountsCount = v
}

// GetAccountsRatio returns the AccountsRatio field value
func (o *AccountDiscoverability) GetAccountsRatio() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AccountsRatio
}

// GetAccountsRatioOk returns a tuple with the AccountsRatio field value
// and a boolean to check if the value has been set.
func (o *AccountDiscoverability) GetAccountsRatioOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountsRatio, true
}

// SetAccountsRatio sets field value
func (o *AccountDiscoverability) SetAccountsRatio(v float32) {
	o.AccountsRatio = v
}

// GetAccountsBySource returns the AccountsBySource field value
func (o *AccountDiscoverability) GetAccountsBySource() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}

	return o.AccountsBySource
}

// GetAccountsBySourceOk returns a tuple with the AccountsBySource field value
// and a boolean to check if the value has been set.
func (o *AccountDiscoverability) GetAccountsBySourceOk() (*map[string]int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountsBySource, true
}

// SetAccountsBySource sets field value
func (o *AccountDiscoverability) SetAccountsBySource(v map[string]int32) {
	o.AccountsBySource = v
}

func (o AccountDiscoverability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["company"] = o.Company
	}
	if o.Uid != nil {
		toSerialize["uid"] = o.Uid
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Group != nil {
		toSerialize["group"] = o.Group
	}
	if o.Entity != nil {
		toSerialize["entity"] = o.Entity
	}
	if o.Score != nil {
		toSerialize["score"] = o.Score
	}
	if o.Resolution != nil {
		toSerialize["resolution"] = o.Resolution
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["accounts_count"] = o.AccountsCount
	}
	if true {
		toSerialize["accounts_ratio"] = o.AccountsRatio
	}
	if true {
		toSerialize["accounts_by_source"] = o.AccountsBySource
	}
	return json.Marshal(toSerialize)
}

type NullableAccountDiscoverability struct {
	value *AccountDiscoverability
	isSet bool
}

func (v NullableAccountDiscoverability) Get() *AccountDiscoverability {
	return v.value
}

func (v *NullableAccountDiscoverability) Set(val *AccountDiscoverability) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountDiscoverability) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountDiscoverability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountDiscoverability(val *AccountDiscoverability) *NullableAccountDiscoverability {
	return &NullableAccountDiscoverability{value: val, isSet: true}
}

func (v NullableAccountDiscoverability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountDiscoverability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


