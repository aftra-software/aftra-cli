/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// DomainEntity struct for DomainEntity
type DomainEntity struct {
	Name string `json:"name"`
	ActiveScanFrequency *ScanFrequency `json:"activeScanFrequency,omitempty"`
	Pk string `json:"pk"`
	Sk string `json:"sk"`
	EntityType *string `json:"entityType,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
	DnsVerified *bool `json:"dnsVerified,omitempty"`
	AdminVerified *bool `json:"adminVerified,omitempty"`
	Metadata *DomainMetadata `json:"metadata,omitempty"`
	TxtRecord *string `json:"txtRecord,omitempty"`
	SourceInformation Sourceinformation `json:"sourceInformation"`
}

// NewDomainEntity instantiates a new DomainEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainEntity(name string, pk string, sk string, sourceInformation Sourceinformation) *DomainEntity {
	this := DomainEntity{}
	this.Name = name
	this.Pk = pk
	this.Sk = sk
	var dnsVerified bool = false
	this.DnsVerified = &dnsVerified
	var adminVerified bool = false
	this.AdminVerified = &adminVerified
	this.SourceInformation = sourceInformation
	return &this
}

// NewDomainEntityWithDefaults instantiates a new DomainEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainEntityWithDefaults() *DomainEntity {
	this := DomainEntity{}
	var dnsVerified bool = false
	this.DnsVerified = &dnsVerified
	var adminVerified bool = false
	this.AdminVerified = &adminVerified
	return &this
}

// GetName returns the Name field value
func (o *DomainEntity) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DomainEntity) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DomainEntity) SetName(v string) {
	o.Name = v
}

// GetActiveScanFrequency returns the ActiveScanFrequency field value if set, zero value otherwise.
func (o *DomainEntity) GetActiveScanFrequency() ScanFrequency {
	if o == nil || o.ActiveScanFrequency == nil {
		var ret ScanFrequency
		return ret
	}
	return *o.ActiveScanFrequency
}

// GetActiveScanFrequencyOk returns a tuple with the ActiveScanFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainEntity) GetActiveScanFrequencyOk() (*ScanFrequency, bool) {
	if o == nil || o.ActiveScanFrequency == nil {
		return nil, false
	}
	return o.ActiveScanFrequency, true
}

// HasActiveScanFrequency returns a boolean if a field has been set.
func (o *DomainEntity) HasActiveScanFrequency() bool {
	if o != nil && o.ActiveScanFrequency != nil {
		return true
	}

	return false
}

// SetActiveScanFrequency gets a reference to the given ScanFrequency and assigns it to the ActiveScanFrequency field.
func (o *DomainEntity) SetActiveScanFrequency(v ScanFrequency) {
	o.ActiveScanFrequency = &v
}

// GetPk returns the Pk field value
func (o *DomainEntity) GetPk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Pk
}

// GetPkOk returns a tuple with the Pk field value
// and a boolean to check if the value has been set.
func (o *DomainEntity) GetPkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pk, true
}

// SetPk sets field value
func (o *DomainEntity) SetPk(v string) {
	o.Pk = v
}

// GetSk returns the Sk field value
func (o *DomainEntity) GetSk() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sk
}

// GetSkOk returns a tuple with the Sk field value
// and a boolean to check if the value has been set.
func (o *DomainEntity) GetSkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sk, true
}

// SetSk sets field value
func (o *DomainEntity) SetSk(v string) {
	o.Sk = v
}

// GetEntityType returns the EntityType field value if set, zero value otherwise.
func (o *DomainEntity) GetEntityType() string {
	if o == nil || o.EntityType == nil {
		var ret string
		return ret
	}
	return *o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainEntity) GetEntityTypeOk() (*string, bool) {
	if o == nil || o.EntityType == nil {
		return nil, false
	}
	return o.EntityType, true
}

// HasEntityType returns a boolean if a field has been set.
func (o *DomainEntity) HasEntityType() bool {
	if o != nil && o.EntityType != nil {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given string and assigns it to the EntityType field.
func (o *DomainEntity) SetEntityType(v string) {
	o.EntityType = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *DomainEntity) GetCreated() time.Time {
	if o == nil || o.Created == nil {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainEntity) GetCreatedOk() (*time.Time, bool) {
	if o == nil || o.Created == nil {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *DomainEntity) HasCreated() bool {
	if o != nil && o.Created != nil {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *DomainEntity) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *DomainEntity) GetUpdated() time.Time {
	if o == nil || o.Updated == nil {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainEntity) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || o.Updated == nil {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *DomainEntity) HasUpdated() bool {
	if o != nil && o.Updated != nil {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *DomainEntity) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetDnsVerified returns the DnsVerified field value if set, zero value otherwise.
func (o *DomainEntity) GetDnsVerified() bool {
	if o == nil || o.DnsVerified == nil {
		var ret bool
		return ret
	}
	return *o.DnsVerified
}

// GetDnsVerifiedOk returns a tuple with the DnsVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainEntity) GetDnsVerifiedOk() (*bool, bool) {
	if o == nil || o.DnsVerified == nil {
		return nil, false
	}
	return o.DnsVerified, true
}

// HasDnsVerified returns a boolean if a field has been set.
func (o *DomainEntity) HasDnsVerified() bool {
	if o != nil && o.DnsVerified != nil {
		return true
	}

	return false
}

// SetDnsVerified gets a reference to the given bool and assigns it to the DnsVerified field.
func (o *DomainEntity) SetDnsVerified(v bool) {
	o.DnsVerified = &v
}

// GetAdminVerified returns the AdminVerified field value if set, zero value otherwise.
func (o *DomainEntity) GetAdminVerified() bool {
	if o == nil || o.AdminVerified == nil {
		var ret bool
		return ret
	}
	return *o.AdminVerified
}

// GetAdminVerifiedOk returns a tuple with the AdminVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainEntity) GetAdminVerifiedOk() (*bool, bool) {
	if o == nil || o.AdminVerified == nil {
		return nil, false
	}
	return o.AdminVerified, true
}

// HasAdminVerified returns a boolean if a field has been set.
func (o *DomainEntity) HasAdminVerified() bool {
	if o != nil && o.AdminVerified != nil {
		return true
	}

	return false
}

// SetAdminVerified gets a reference to the given bool and assigns it to the AdminVerified field.
func (o *DomainEntity) SetAdminVerified(v bool) {
	o.AdminVerified = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DomainEntity) GetMetadata() DomainMetadata {
	if o == nil || o.Metadata == nil {
		var ret DomainMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainEntity) GetMetadataOk() (*DomainMetadata, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DomainEntity) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given DomainMetadata and assigns it to the Metadata field.
func (o *DomainEntity) SetMetadata(v DomainMetadata) {
	o.Metadata = &v
}

// GetTxtRecord returns the TxtRecord field value if set, zero value otherwise.
func (o *DomainEntity) GetTxtRecord() string {
	if o == nil || o.TxtRecord == nil {
		var ret string
		return ret
	}
	return *o.TxtRecord
}

// GetTxtRecordOk returns a tuple with the TxtRecord field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainEntity) GetTxtRecordOk() (*string, bool) {
	if o == nil || o.TxtRecord == nil {
		return nil, false
	}
	return o.TxtRecord, true
}

// HasTxtRecord returns a boolean if a field has been set.
func (o *DomainEntity) HasTxtRecord() bool {
	if o != nil && o.TxtRecord != nil {
		return true
	}

	return false
}

// SetTxtRecord gets a reference to the given string and assigns it to the TxtRecord field.
func (o *DomainEntity) SetTxtRecord(v string) {
	o.TxtRecord = &v
}

// GetSourceInformation returns the SourceInformation field value
func (o *DomainEntity) GetSourceInformation() Sourceinformation {
	if o == nil {
		var ret Sourceinformation
		return ret
	}

	return o.SourceInformation
}

// GetSourceInformationOk returns a tuple with the SourceInformation field value
// and a boolean to check if the value has been set.
func (o *DomainEntity) GetSourceInformationOk() (*Sourceinformation, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceInformation, true
}

// SetSourceInformation sets field value
func (o *DomainEntity) SetSourceInformation(v Sourceinformation) {
	o.SourceInformation = v
}

func (o DomainEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ActiveScanFrequency != nil {
		toSerialize["activeScanFrequency"] = o.ActiveScanFrequency
	}
	if true {
		toSerialize["pk"] = o.Pk
	}
	if true {
		toSerialize["sk"] = o.Sk
	}
	if o.EntityType != nil {
		toSerialize["entityType"] = o.EntityType
	}
	if o.Created != nil {
		toSerialize["created"] = o.Created
	}
	if o.Updated != nil {
		toSerialize["updated"] = o.Updated
	}
	if o.DnsVerified != nil {
		toSerialize["dnsVerified"] = o.DnsVerified
	}
	if o.AdminVerified != nil {
		toSerialize["adminVerified"] = o.AdminVerified
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.TxtRecord != nil {
		toSerialize["txtRecord"] = o.TxtRecord
	}
	if true {
		toSerialize["sourceInformation"] = o.SourceInformation
	}
	return json.Marshal(toSerialize)
}

type NullableDomainEntity struct {
	value *DomainEntity
	isSet bool
}

func (v NullableDomainEntity) Get() *DomainEntity {
	return v.value
}

func (v *NullableDomainEntity) Set(val *DomainEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainEntity(val *DomainEntity) *NullableDomainEntity {
	return &NullableDomainEntity{value: val, isSet: true}
}

func (v NullableDomainEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


