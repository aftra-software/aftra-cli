/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SuggestionEntityTypes An enumeration.
type SuggestionEntityTypes string

// List of SuggestionEntityTypes
const (
	DOMAIN SuggestionEntityTypes = "Domain"
	SUBDOMAIN SuggestionEntityTypes = "Subdomain"
	ACCOUNT SuggestionEntityTypes = "Account"
	REPOSITORY SuggestionEntityTypes = "Repository"
)

// All allowed values of SuggestionEntityTypes enum
var AllowedSuggestionEntityTypesEnumValues = []SuggestionEntityTypes{
	"Domain",
	"Subdomain",
	"Account",
	"Repository",
}

func (v *SuggestionEntityTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SuggestionEntityTypes(value)
	for _, existing := range AllowedSuggestionEntityTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SuggestionEntityTypes", value)
}

// NewSuggestionEntityTypesFromValue returns a pointer to a valid SuggestionEntityTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSuggestionEntityTypesFromValue(v string) (*SuggestionEntityTypes, error) {
	ev := SuggestionEntityTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SuggestionEntityTypes: valid values are %v", v, AllowedSuggestionEntityTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SuggestionEntityTypes) IsValid() bool {
	for _, existing := range AllowedSuggestionEntityTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SuggestionEntityTypes value
func (v SuggestionEntityTypes) Ptr() *SuggestionEntityTypes {
	return &v
}

type NullableSuggestionEntityTypes struct {
	value *SuggestionEntityTypes
	isSet bool
}

func (v NullableSuggestionEntityTypes) Get() *SuggestionEntityTypes {
	return v.value
}

func (v *NullableSuggestionEntityTypes) Set(val *SuggestionEntityTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableSuggestionEntityTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableSuggestionEntityTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuggestionEntityTypes(val *SuggestionEntityTypes) *NullableSuggestionEntityTypes {
	return &NullableSuggestionEntityTypes{value: val, isSet: true}
}

func (v NullableSuggestionEntityTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuggestionEntityTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

