/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// QuestionsApiService QuestionsApi service
type QuestionsApiService service

type ApiGetSecurityQuestionsRequest struct {
	ctx context.Context
	ApiService *QuestionsApiService
	companyPk string
	parentPk *string
	identity *string
}

func (r ApiGetSecurityQuestionsRequest) ParentPk(parentPk string) ApiGetSecurityQuestionsRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiGetSecurityQuestionsRequest) Identity(identity string) ApiGetSecurityQuestionsRequest {
	r.identity = &identity
	return r
}

func (r ApiGetSecurityQuestionsRequest) Execute() (*CompanyQuestionList, *http.Response, error) {
	return r.ApiService.GetSecurityQuestionsExecute(r)
}

/*
GetSecurityQuestions Get Questions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @return ApiGetSecurityQuestionsRequest
*/
func (a *QuestionsApiService) GetSecurityQuestions(ctx context.Context, companyPk string) ApiGetSecurityQuestionsRequest {
	return ApiGetSecurityQuestionsRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
	}
}

// Execute executes the request
//  @return CompanyQuestionList
func (a *QuestionsApiService) GetSecurityQuestionsExecute(r ApiGetSecurityQuestionsRequest) (*CompanyQuestionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyQuestionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuestionsApiService.GetSecurityQuestions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{company_pk}/questions/"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostUpdateAnswerRequest struct {
	ctx context.Context
	ApiService *QuestionsApiService
	companyPk string
	questionUid string
	answerUpdate *AnswerUpdate
	parentPk *string
	identity *string
}

func (r ApiPostUpdateAnswerRequest) AnswerUpdate(answerUpdate AnswerUpdate) ApiPostUpdateAnswerRequest {
	r.answerUpdate = &answerUpdate
	return r
}

func (r ApiPostUpdateAnswerRequest) ParentPk(parentPk string) ApiPostUpdateAnswerRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiPostUpdateAnswerRequest) Identity(identity string) ApiPostUpdateAnswerRequest {
	r.identity = &identity
	return r
}

func (r ApiPostUpdateAnswerRequest) Execute() (*CompanyQuestionList, *http.Response, error) {
	return r.ApiService.PostUpdateAnswerExecute(r)
}

/*
PostUpdateAnswer Post Update Answer

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @param questionUid
 @return ApiPostUpdateAnswerRequest
*/
func (a *QuestionsApiService) PostUpdateAnswer(ctx context.Context, companyPk string, questionUid string) ApiPostUpdateAnswerRequest {
	return ApiPostUpdateAnswerRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
		questionUid: questionUid,
	}
}

// Execute executes the request
//  @return CompanyQuestionList
func (a *QuestionsApiService) PostUpdateAnswerExecute(r ApiPostUpdateAnswerRequest) (*CompanyQuestionList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CompanyQuestionList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "QuestionsApiService.PostUpdateAnswer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{company_pk}/questions/{question_uid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"question_uid"+"}", url.PathEscape(parameterToString(r.questionUid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.answerUpdate == nil {
		return localVarReturnValue, nil, reportError("answerUpdate is required and must be specified")
	}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.answerUpdate
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
