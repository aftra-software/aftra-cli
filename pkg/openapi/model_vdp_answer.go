/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VDPAnswer An enumeration.
type VDPAnswer string

// List of VDPAnswer
const (
	MANAGED VDPAnswer = "managed"
	SELF_HOSTED VDPAnswer = "self_hosted"
	EXPLORING VDPAnswer = "exploring"
	NONE VDPAnswer = "none"
)

// All allowed values of VDPAnswer enum
var AllowedVDPAnswerEnumValues = []VDPAnswer{
	"managed",
	"self_hosted",
	"exploring",
	"none",
}

func (v *VDPAnswer) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VDPAnswer(value)
	for _, existing := range AllowedVDPAnswerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VDPAnswer", value)
}

// NewVDPAnswerFromValue returns a pointer to a valid VDPAnswer
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVDPAnswerFromValue(v string) (*VDPAnswer, error) {
	ev := VDPAnswer(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VDPAnswer: valid values are %v", v, AllowedVDPAnswerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VDPAnswer) IsValid() bool {
	for _, existing := range AllowedVDPAnswerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VDPAnswer value
func (v VDPAnswer) Ptr() *VDPAnswer {
	return &v
}

type NullableVDPAnswer struct {
	value *VDPAnswer
	isSet bool
}

func (v NullableVDPAnswer) Get() *VDPAnswer {
	return v.value
}

func (v *NullableVDPAnswer) Set(val *VDPAnswer) {
	v.value = val
	v.isSet = true
}

func (v NullableVDPAnswer) IsSet() bool {
	return v.isSet
}

func (v *NullableVDPAnswer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVDPAnswer(val *VDPAnswer) *NullableVDPAnswer {
	return &NullableVDPAnswer{value: val, isSet: true}
}

func (v NullableVDPAnswer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVDPAnswer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

