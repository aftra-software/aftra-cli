/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// ApiTokensApiService ApiTokensApi service
type ApiTokensApiService service

type ApiCreateAPITokenRequest struct {
	ctx context.Context
	ApiService *ApiTokensApiService
	companyPk string
	createToken *CreateToken
	parentPk *string
	identity *string
}

func (r ApiCreateAPITokenRequest) CreateToken(createToken CreateToken) ApiCreateAPITokenRequest {
	r.createToken = &createToken
	return r
}

func (r ApiCreateAPITokenRequest) ParentPk(parentPk string) ApiCreateAPITokenRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiCreateAPITokenRequest) Identity(identity string) ApiCreateAPITokenRequest {
	r.identity = &identity
	return r
}

func (r ApiCreateAPITokenRequest) Execute() (*Token, *http.Response, error) {
	return r.ApiService.CreateAPITokenExecute(r)
}

/*
CreateAPIToken Create

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @return ApiCreateAPITokenRequest
*/
func (a *ApiTokensApiService) CreateAPIToken(ctx context.Context, companyPk string) ApiCreateAPITokenRequest {
	return ApiCreateAPITokenRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
	}
}

// Execute executes the request
//  @return Token
func (a *ApiTokensApiService) CreateAPITokenExecute(r ApiCreateAPITokenRequest) (*Token, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Token
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiTokensApiService.CreateAPIToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{company_pk}/api-tokens/"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createToken == nil {
		return localVarReturnValue, nil, reportError("createToken is required and must be specified")
	}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createToken
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAPITokenRequest struct {
	ctx context.Context
	ApiService *ApiTokensApiService
	companyPk string
	tokenUid string
	parentPk *string
	identity *string
}

func (r ApiDeleteAPITokenRequest) ParentPk(parentPk string) ApiDeleteAPITokenRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiDeleteAPITokenRequest) Identity(identity string) ApiDeleteAPITokenRequest {
	r.identity = &identity
	return r
}

func (r ApiDeleteAPITokenRequest) Execute() (interface{}, *http.Response, error) {
	return r.ApiService.DeleteAPITokenExecute(r)
}

/*
DeleteAPIToken Delete Token

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @param tokenUid
 @return ApiDeleteAPITokenRequest
*/
func (a *ApiTokensApiService) DeleteAPIToken(ctx context.Context, companyPk string, tokenUid string) ApiDeleteAPITokenRequest {
	return ApiDeleteAPITokenRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
		tokenUid: tokenUid,
	}
}

// Execute executes the request
//  @return interface{}
func (a *ApiTokensApiService) DeleteAPITokenExecute(r ApiDeleteAPITokenRequest) (interface{}, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiTokensApiService.DeleteAPIToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{company_pk}/api-tokens/{token_uid}/"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"token_uid"+"}", url.PathEscape(parameterToString(r.tokenUid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAPITokensRequest struct {
	ctx context.Context
	ApiService *ApiTokensApiService
	companyPk string
	parentPk *string
	identity *string
}

func (r ApiListAPITokensRequest) ParentPk(parentPk string) ApiListAPITokensRequest {
	r.parentPk = &parentPk
	return r
}

func (r ApiListAPITokensRequest) Identity(identity string) ApiListAPITokensRequest {
	r.identity = &identity
	return r
}

func (r ApiListAPITokensRequest) Execute() ([]MaskedToken, *http.Response, error) {
	return r.ApiService.ListAPITokensExecute(r)
}

/*
ListAPITokens List Tokens

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param companyPk
 @return ApiListAPITokensRequest
*/
func (a *ApiTokensApiService) ListAPITokens(ctx context.Context, companyPk string) ApiListAPITokensRequest {
	return ApiListAPITokensRequest{
		ApiService: a,
		ctx: ctx,
		companyPk: companyPk,
	}
}

// Execute executes the request
//  @return []MaskedToken
func (a *ApiTokensApiService) ListAPITokensExecute(r ApiListAPITokensRequest) ([]MaskedToken, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MaskedToken
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ApiTokensApiService.ListAPITokens")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/companies/{company_pk}/api-tokens/"
	localVarPath = strings.Replace(localVarPath, "{"+"company_pk"+"}", url.PathEscape(parameterToString(r.companyPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.parentPk != nil {
		localVarQueryParams.Add("parent_pk", parameterToString(*r.parentPk, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
