/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// VulnScanAnswer An enumeration.
type VulnScanAnswer string

// List of VulnScanAnswer
const (
	QUARTERLY VulnScanAnswer = "quarterly"
	YEARLY VulnScanAnswer = "yearly"
	NONE VulnScanAnswer = "none"
)

// All allowed values of VulnScanAnswer enum
var AllowedVulnScanAnswerEnumValues = []VulnScanAnswer{
	"quarterly",
	"yearly",
	"none",
}

func (v *VulnScanAnswer) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VulnScanAnswer(value)
	for _, existing := range AllowedVulnScanAnswerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VulnScanAnswer", value)
}

// NewVulnScanAnswerFromValue returns a pointer to a valid VulnScanAnswer
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVulnScanAnswerFromValue(v string) (*VulnScanAnswer, error) {
	ev := VulnScanAnswer(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VulnScanAnswer: valid values are %v", v, AllowedVulnScanAnswerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VulnScanAnswer) IsValid() bool {
	for _, existing := range AllowedVulnScanAnswerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VulnScanAnswer value
func (v VulnScanAnswer) Ptr() *VulnScanAnswer {
	return &v
}

type NullableVulnScanAnswer struct {
	value *VulnScanAnswer
	isSet bool
}

func (v NullableVulnScanAnswer) Get() *VulnScanAnswer {
	return v.value
}

func (v *NullableVulnScanAnswer) Set(val *VulnScanAnswer) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnScanAnswer) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnScanAnswer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnScanAnswer(val *VulnScanAnswer) *NullableVulnScanAnswer {
	return &NullableVulnScanAnswer{value: val, isSet: true}
}

func (v NullableVulnScanAnswer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnScanAnswer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

