/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Opportunity struct for Opportunity
type Opportunity struct {
	Company string `json:"company"`
	Uid string `json:"uid"`
	Type ModelType `json:"type"`
	Group OpportunityGroup `json:"group"`
	Entity *string `json:"entity,omitempty"`
	Score *OpportunityScore `json:"score,omitempty"`
	Resolution *OpportunityResolution `json:"resolution,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewOpportunity instantiates a new Opportunity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpportunity(company string, uid string, type_ ModelType, group OpportunityGroup) *Opportunity {
	this := Opportunity{}
	this.Company = company
	this.Uid = uid
	this.Type = type_
	this.Group = group
	return &this
}

// NewOpportunityWithDefaults instantiates a new Opportunity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpportunityWithDefaults() *Opportunity {
	this := Opportunity{}
	return &this
}

// GetCompany returns the Company field value
func (o *Opportunity) GetCompany() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *Opportunity) GetCompanyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *Opportunity) SetCompany(v string) {
	o.Company = v
}

// GetUid returns the Uid field value
func (o *Opportunity) GetUid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Uid
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
func (o *Opportunity) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Uid, true
}

// SetUid sets field value
func (o *Opportunity) SetUid(v string) {
	o.Uid = v
}

// GetType returns the Type field value
func (o *Opportunity) GetType() ModelType {
	if o == nil {
		var ret ModelType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Opportunity) GetTypeOk() (*ModelType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Opportunity) SetType(v ModelType) {
	o.Type = v
}

// GetGroup returns the Group field value
func (o *Opportunity) GetGroup() OpportunityGroup {
	if o == nil {
		var ret OpportunityGroup
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *Opportunity) GetGroupOk() (*OpportunityGroup, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *Opportunity) SetGroup(v OpportunityGroup) {
	o.Group = v
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *Opportunity) GetEntity() string {
	if o == nil || o.Entity == nil {
		var ret string
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetEntityOk() (*string, bool) {
	if o == nil || o.Entity == nil {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *Opportunity) HasEntity() bool {
	if o != nil && o.Entity != nil {
		return true
	}

	return false
}

// SetEntity gets a reference to the given string and assigns it to the Entity field.
func (o *Opportunity) SetEntity(v string) {
	o.Entity = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *Opportunity) GetScore() OpportunityScore {
	if o == nil || o.Score == nil {
		var ret OpportunityScore
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetScoreOk() (*OpportunityScore, bool) {
	if o == nil || o.Score == nil {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *Opportunity) HasScore() bool {
	if o != nil && o.Score != nil {
		return true
	}

	return false
}

// SetScore gets a reference to the given OpportunityScore and assigns it to the Score field.
func (o *Opportunity) SetScore(v OpportunityScore) {
	o.Score = &v
}

// GetResolution returns the Resolution field value if set, zero value otherwise.
func (o *Opportunity) GetResolution() OpportunityResolution {
	if o == nil || o.Resolution == nil {
		var ret OpportunityResolution
		return ret
	}
	return *o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetResolutionOk() (*OpportunityResolution, bool) {
	if o == nil || o.Resolution == nil {
		return nil, false
	}
	return o.Resolution, true
}

// HasResolution returns a boolean if a field has been set.
func (o *Opportunity) HasResolution() bool {
	if o != nil && o.Resolution != nil {
		return true
	}

	return false
}

// SetResolution gets a reference to the given OpportunityResolution and assigns it to the Resolution field.
func (o *Opportunity) SetResolution(v OpportunityResolution) {
	o.Resolution = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Opportunity) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Opportunity) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Opportunity) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Opportunity) SetName(v string) {
	o.Name = &v
}

func (o Opportunity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["company"] = o.Company
	}
	if true {
		toSerialize["uid"] = o.Uid
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["group"] = o.Group
	}
	if o.Entity != nil {
		toSerialize["entity"] = o.Entity
	}
	if o.Score != nil {
		toSerialize["score"] = o.Score
	}
	if o.Resolution != nil {
		toSerialize["resolution"] = o.Resolution
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableOpportunity struct {
	value *Opportunity
	isSet bool
}

func (v NullableOpportunity) Get() *Opportunity {
	return v.value
}

func (v *NullableOpportunity) Set(val *Opportunity) {
	v.value = val
	v.isSet = true
}

func (v NullableOpportunity) IsSet() bool {
	return v.isSet
}

func (v *NullableOpportunity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpportunity(val *Opportunity) *NullableOpportunity {
	return &NullableOpportunity{value: val, isSet: true}
}

func (v NullableOpportunity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpportunity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


