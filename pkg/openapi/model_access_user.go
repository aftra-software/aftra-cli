/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AccessUser struct for AccessUser
type AccessUser struct {
	Sub string `json:"sub"`
}

// NewAccessUser instantiates a new AccessUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessUser(sub string) *AccessUser {
	this := AccessUser{}
	this.Sub = sub
	return &this
}

// NewAccessUserWithDefaults instantiates a new AccessUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessUserWithDefaults() *AccessUser {
	this := AccessUser{}
	return &this
}

// GetSub returns the Sub field value
func (o *AccessUser) GetSub() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Sub
}

// GetSubOk returns a tuple with the Sub field value
// and a boolean to check if the value has been set.
func (o *AccessUser) GetSubOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sub, true
}

// SetSub sets field value
func (o *AccessUser) SetSub(v string) {
	o.Sub = v
}

func (o AccessUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sub"] = o.Sub
	}
	return json.Marshal(toSerialize)
}

type NullableAccessUser struct {
	value *AccessUser
	isSet bool
}

func (v NullableAccessUser) Get() *AccessUser {
	return v.value
}

func (v *NullableAccessUser) Set(val *AccessUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessUser(val *AccessUser) *NullableAccessUser {
	return &NullableAccessUser{value: val, isSet: true}
}

func (v NullableAccessUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


