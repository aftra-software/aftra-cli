/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LoginResponseMfaChallenge struct for LoginResponseMfaChallenge
type LoginResponseMfaChallenge struct {
	Challenge ChallengeTypes `json:"challenge"`
	SetupSecret *string `json:"setupSecret,omitempty"`
	Session *string `json:"session,omitempty"`
}

// NewLoginResponseMfaChallenge instantiates a new LoginResponseMfaChallenge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoginResponseMfaChallenge(challenge ChallengeTypes) *LoginResponseMfaChallenge {
	this := LoginResponseMfaChallenge{}
	this.Challenge = challenge
	return &this
}

// NewLoginResponseMfaChallengeWithDefaults instantiates a new LoginResponseMfaChallenge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoginResponseMfaChallengeWithDefaults() *LoginResponseMfaChallenge {
	this := LoginResponseMfaChallenge{}
	return &this
}

// GetChallenge returns the Challenge field value
func (o *LoginResponseMfaChallenge) GetChallenge() ChallengeTypes {
	if o == nil {
		var ret ChallengeTypes
		return ret
	}

	return o.Challenge
}

// GetChallengeOk returns a tuple with the Challenge field value
// and a boolean to check if the value has been set.
func (o *LoginResponseMfaChallenge) GetChallengeOk() (*ChallengeTypes, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Challenge, true
}

// SetChallenge sets field value
func (o *LoginResponseMfaChallenge) SetChallenge(v ChallengeTypes) {
	o.Challenge = v
}

// GetSetupSecret returns the SetupSecret field value if set, zero value otherwise.
func (o *LoginResponseMfaChallenge) GetSetupSecret() string {
	if o == nil || o.SetupSecret == nil {
		var ret string
		return ret
	}
	return *o.SetupSecret
}

// GetSetupSecretOk returns a tuple with the SetupSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginResponseMfaChallenge) GetSetupSecretOk() (*string, bool) {
	if o == nil || o.SetupSecret == nil {
		return nil, false
	}
	return o.SetupSecret, true
}

// HasSetupSecret returns a boolean if a field has been set.
func (o *LoginResponseMfaChallenge) HasSetupSecret() bool {
	if o != nil && o.SetupSecret != nil {
		return true
	}

	return false
}

// SetSetupSecret gets a reference to the given string and assigns it to the SetupSecret field.
func (o *LoginResponseMfaChallenge) SetSetupSecret(v string) {
	o.SetupSecret = &v
}

// GetSession returns the Session field value if set, zero value otherwise.
func (o *LoginResponseMfaChallenge) GetSession() string {
	if o == nil || o.Session == nil {
		var ret string
		return ret
	}
	return *o.Session
}

// GetSessionOk returns a tuple with the Session field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoginResponseMfaChallenge) GetSessionOk() (*string, bool) {
	if o == nil || o.Session == nil {
		return nil, false
	}
	return o.Session, true
}

// HasSession returns a boolean if a field has been set.
func (o *LoginResponseMfaChallenge) HasSession() bool {
	if o != nil && o.Session != nil {
		return true
	}

	return false
}

// SetSession gets a reference to the given string and assigns it to the Session field.
func (o *LoginResponseMfaChallenge) SetSession(v string) {
	o.Session = &v
}

func (o LoginResponseMfaChallenge) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["challenge"] = o.Challenge
	}
	if o.SetupSecret != nil {
		toSerialize["setupSecret"] = o.SetupSecret
	}
	if o.Session != nil {
		toSerialize["session"] = o.Session
	}
	return json.Marshal(toSerialize)
}

type NullableLoginResponseMfaChallenge struct {
	value *LoginResponseMfaChallenge
	isSet bool
}

func (v NullableLoginResponseMfaChallenge) Get() *LoginResponseMfaChallenge {
	return v.value
}

func (v *NullableLoginResponseMfaChallenge) Set(val *LoginResponseMfaChallenge) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginResponseMfaChallenge) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginResponseMfaChallenge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginResponseMfaChallenge(val *LoginResponseMfaChallenge) *NullableLoginResponseMfaChallenge {
	return &NullableLoginResponseMfaChallenge{value: val, isSet: true}
}

func (v NullableLoginResponseMfaChallenge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginResponseMfaChallenge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


