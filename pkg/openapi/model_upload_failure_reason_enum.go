/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// UploadFailureReasonEnum An enumeration.
type UploadFailureReasonEnum string

// List of UploadFailureReasonEnum
const (
	INTERNAL_ERROR UploadFailureReasonEnum = "internal-error"
	DECODE_ERROR UploadFailureReasonEnum = "decode-error"
	INVALID_DOMAIN_NAME UploadFailureReasonEnum = "invalid-domain-name"
	ALREADY_EXISTS UploadFailureReasonEnum = "already-exists"
)

// All allowed values of UploadFailureReasonEnum enum
var AllowedUploadFailureReasonEnumEnumValues = []UploadFailureReasonEnum{
	"internal-error",
	"decode-error",
	"invalid-domain-name",
	"already-exists",
}

func (v *UploadFailureReasonEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := UploadFailureReasonEnum(value)
	for _, existing := range AllowedUploadFailureReasonEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid UploadFailureReasonEnum", value)
}

// NewUploadFailureReasonEnumFromValue returns a pointer to a valid UploadFailureReasonEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUploadFailureReasonEnumFromValue(v string) (*UploadFailureReasonEnum, error) {
	ev := UploadFailureReasonEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for UploadFailureReasonEnum: valid values are %v", v, AllowedUploadFailureReasonEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UploadFailureReasonEnum) IsValid() bool {
	for _, existing := range AllowedUploadFailureReasonEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to UploadFailureReasonEnum value
func (v UploadFailureReasonEnum) Ptr() *UploadFailureReasonEnum {
	return &v
}

type NullableUploadFailureReasonEnum struct {
	value *UploadFailureReasonEnum
	isSet bool
}

func (v NullableUploadFailureReasonEnum) Get() *UploadFailureReasonEnum {
	return v.value
}

func (v *NullableUploadFailureReasonEnum) Set(val *UploadFailureReasonEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadFailureReasonEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadFailureReasonEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadFailureReasonEnum(val *UploadFailureReasonEnum) *NullableUploadFailureReasonEnum {
	return &NullableUploadFailureReasonEnum{value: val, isSet: true}
}

func (v NullableUploadFailureReasonEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadFailureReasonEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

