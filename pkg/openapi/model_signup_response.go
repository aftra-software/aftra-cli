/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SignupResponse struct for SignupResponse
type SignupResponse struct {
	Confirmed bool `json:"confirmed"`
}

// NewSignupResponse instantiates a new SignupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignupResponse(confirmed bool) *SignupResponse {
	this := SignupResponse{}
	this.Confirmed = confirmed
	return &this
}

// NewSignupResponseWithDefaults instantiates a new SignupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignupResponseWithDefaults() *SignupResponse {
	this := SignupResponse{}
	return &this
}

// GetConfirmed returns the Confirmed field value
func (o *SignupResponse) GetConfirmed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Confirmed
}

// GetConfirmedOk returns a tuple with the Confirmed field value
// and a boolean to check if the value has been set.
func (o *SignupResponse) GetConfirmedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Confirmed, true
}

// SetConfirmed sets field value
func (o *SignupResponse) SetConfirmed(v bool) {
	o.Confirmed = v
}

func (o SignupResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["confirmed"] = o.Confirmed
	}
	return json.Marshal(toSerialize)
}

type NullableSignupResponse struct {
	value *SignupResponse
	isSet bool
}

func (v NullableSignupResponse) Get() *SignupResponse {
	return v.value
}

func (v *NullableSignupResponse) Set(val *SignupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSignupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSignupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignupResponse(val *SignupResponse) *NullableSignupResponse {
	return &NullableSignupResponse{value: val, isSet: true}
}

func (v NullableSignupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


