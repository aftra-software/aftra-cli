/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CompanyAccessEnum An enumeration.
type CompanyAccessEnum string

// List of CompanyAccessEnum
const (
	ADMIN CompanyAccessEnum = "admin"
	READ CompanyAccessEnum = "read"
	TOKEN CompanyAccessEnum = "token"
)

// All allowed values of CompanyAccessEnum enum
var AllowedCompanyAccessEnumEnumValues = []CompanyAccessEnum{
	"admin",
	"read",
	"token",
}

func (v *CompanyAccessEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CompanyAccessEnum(value)
	for _, existing := range AllowedCompanyAccessEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CompanyAccessEnum", value)
}

// NewCompanyAccessEnumFromValue returns a pointer to a valid CompanyAccessEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCompanyAccessEnumFromValue(v string) (*CompanyAccessEnum, error) {
	ev := CompanyAccessEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CompanyAccessEnum: valid values are %v", v, AllowedCompanyAccessEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CompanyAccessEnum) IsValid() bool {
	for _, existing := range AllowedCompanyAccessEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CompanyAccessEnum value
func (v CompanyAccessEnum) Ptr() *CompanyAccessEnum {
	return &v
}

type NullableCompanyAccessEnum struct {
	value *CompanyAccessEnum
	isSet bool
}

func (v NullableCompanyAccessEnum) Get() *CompanyAccessEnum {
	return v.value
}

func (v *NullableCompanyAccessEnum) Set(val *CompanyAccessEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCompanyAccessEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCompanyAccessEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompanyAccessEnum(val *CompanyAccessEnum) *NullableCompanyAccessEnum {
	return &NullableCompanyAccessEnum{value: val, isSet: true}
}

func (v NullableCompanyAccessEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompanyAccessEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

