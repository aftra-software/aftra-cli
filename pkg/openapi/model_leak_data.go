/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LeakData struct for LeakData
type LeakData struct {
	IsHash *bool `json:"is_hash,omitempty"`
	Name *string `json:"name,omitempty"`
	Password *string `json:"password,omitempty"`
	Year *int32 `json:"year,omitempty"`
}

// NewLeakData instantiates a new LeakData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeakData() *LeakData {
	this := LeakData{}
	return &this
}

// NewLeakDataWithDefaults instantiates a new LeakData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeakDataWithDefaults() *LeakData {
	this := LeakData{}
	return &this
}

// GetIsHash returns the IsHash field value if set, zero value otherwise.
func (o *LeakData) GetIsHash() bool {
	if o == nil || o.IsHash == nil {
		var ret bool
		return ret
	}
	return *o.IsHash
}

// GetIsHashOk returns a tuple with the IsHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeakData) GetIsHashOk() (*bool, bool) {
	if o == nil || o.IsHash == nil {
		return nil, false
	}
	return o.IsHash, true
}

// HasIsHash returns a boolean if a field has been set.
func (o *LeakData) HasIsHash() bool {
	if o != nil && o.IsHash != nil {
		return true
	}

	return false
}

// SetIsHash gets a reference to the given bool and assigns it to the IsHash field.
func (o *LeakData) SetIsHash(v bool) {
	o.IsHash = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LeakData) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeakData) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LeakData) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LeakData) SetName(v string) {
	o.Name = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *LeakData) GetPassword() string {
	if o == nil || o.Password == nil {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeakData) GetPasswordOk() (*string, bool) {
	if o == nil || o.Password == nil {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *LeakData) HasPassword() bool {
	if o != nil && o.Password != nil {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *LeakData) SetPassword(v string) {
	o.Password = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *LeakData) GetYear() int32 {
	if o == nil || o.Year == nil {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LeakData) GetYearOk() (*int32, bool) {
	if o == nil || o.Year == nil {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *LeakData) HasYear() bool {
	if o != nil && o.Year != nil {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *LeakData) SetYear(v int32) {
	o.Year = &v
}

func (o LeakData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsHash != nil {
		toSerialize["is_hash"] = o.IsHash
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Password != nil {
		toSerialize["password"] = o.Password
	}
	if o.Year != nil {
		toSerialize["year"] = o.Year
	}
	return json.Marshal(toSerialize)
}

type NullableLeakData struct {
	value *LeakData
	isSet bool
}

func (v NullableLeakData) Get() *LeakData {
	return v.value
}

func (v *NullableLeakData) Set(val *LeakData) {
	v.value = val
	v.isSet = true
}

func (v NullableLeakData) IsSet() bool {
	return v.isSet
}

func (v *NullableLeakData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeakData(val *LeakData) *NullableLeakData {
	return &NullableLeakData{value: val, isSet: true}
}

func (v NullableLeakData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeakData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


