/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PasswordScreenAnswer An enumeration.
type PasswordScreenAnswer string

// List of PasswordScreenAnswer
const (
	YES PasswordScreenAnswer = "yes"
	NO PasswordScreenAnswer = "no"
)

// All allowed values of PasswordScreenAnswer enum
var AllowedPasswordScreenAnswerEnumValues = []PasswordScreenAnswer{
	"yes",
	"no",
}

func (v *PasswordScreenAnswer) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PasswordScreenAnswer(value)
	for _, existing := range AllowedPasswordScreenAnswerEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PasswordScreenAnswer", value)
}

// NewPasswordScreenAnswerFromValue returns a pointer to a valid PasswordScreenAnswer
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPasswordScreenAnswerFromValue(v string) (*PasswordScreenAnswer, error) {
	ev := PasswordScreenAnswer(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PasswordScreenAnswer: valid values are %v", v, AllowedPasswordScreenAnswerEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PasswordScreenAnswer) IsValid() bool {
	for _, existing := range AllowedPasswordScreenAnswerEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PasswordScreenAnswer value
func (v PasswordScreenAnswer) Ptr() *PasswordScreenAnswer {
	return &v
}

type NullablePasswordScreenAnswer struct {
	value *PasswordScreenAnswer
	isSet bool
}

func (v NullablePasswordScreenAnswer) Get() *PasswordScreenAnswer {
	return v.value
}

func (v *NullablePasswordScreenAnswer) Set(val *PasswordScreenAnswer) {
	v.value = val
	v.isSet = true
}

func (v NullablePasswordScreenAnswer) IsSet() bool {
	return v.isSet
}

func (v *NullablePasswordScreenAnswer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePasswordScreenAnswer(val *PasswordScreenAnswer) *NullablePasswordScreenAnswer {
	return &NullablePasswordScreenAnswer{value: val, isSet: true}
}

func (v NullablePasswordScreenAnswer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePasswordScreenAnswer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

