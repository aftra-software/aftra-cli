/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LeakInfo struct for LeakInfo
type LeakInfo struct {
	Leaks []LeakData `json:"leaks"`
}

// NewLeakInfo instantiates a new LeakInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeakInfo(leaks []LeakData) *LeakInfo {
	this := LeakInfo{}
	this.Leaks = leaks
	return &this
}

// NewLeakInfoWithDefaults instantiates a new LeakInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLeakInfoWithDefaults() *LeakInfo {
	this := LeakInfo{}
	return &this
}

// GetLeaks returns the Leaks field value
func (o *LeakInfo) GetLeaks() []LeakData {
	if o == nil {
		var ret []LeakData
		return ret
	}

	return o.Leaks
}

// GetLeaksOk returns a tuple with the Leaks field value
// and a boolean to check if the value has been set.
func (o *LeakInfo) GetLeaksOk() ([]LeakData, bool) {
	if o == nil {
		return nil, false
	}
	return o.Leaks, true
}

// SetLeaks sets field value
func (o *LeakInfo) SetLeaks(v []LeakData) {
	o.Leaks = v
}

func (o LeakInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["leaks"] = o.Leaks
	}
	return json.Marshal(toSerialize)
}

type NullableLeakInfo struct {
	value *LeakInfo
	isSet bool
}

func (v NullableLeakInfo) Get() *LeakInfo {
	return v.value
}

func (v *NullableLeakInfo) Set(val *LeakInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLeakInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLeakInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeakInfo(val *LeakInfo) *NullableLeakInfo {
	return &NullableLeakInfo{value: val, isSet: true}
}

func (v NullableLeakInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeakInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


