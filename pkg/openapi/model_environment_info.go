/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EnvironmentInfo struct for EnvironmentInfo
type EnvironmentInfo struct {
	ExternalIps []string `json:"externalIps"`
	WasCidrs []string `json:"wasCidrs"`
	VulnCidrs []string `json:"vulnCidrs"`
	Env string `json:"env"`
}

// NewEnvironmentInfo instantiates a new EnvironmentInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentInfo(externalIps []string, wasCidrs []string, vulnCidrs []string, env string) *EnvironmentInfo {
	this := EnvironmentInfo{}
	this.ExternalIps = externalIps
	this.WasCidrs = wasCidrs
	this.VulnCidrs = vulnCidrs
	this.Env = env
	return &this
}

// NewEnvironmentInfoWithDefaults instantiates a new EnvironmentInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentInfoWithDefaults() *EnvironmentInfo {
	this := EnvironmentInfo{}
	return &this
}

// GetExternalIps returns the ExternalIps field value
func (o *EnvironmentInfo) GetExternalIps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ExternalIps
}

// GetExternalIpsOk returns a tuple with the ExternalIps field value
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetExternalIpsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalIps, true
}

// SetExternalIps sets field value
func (o *EnvironmentInfo) SetExternalIps(v []string) {
	o.ExternalIps = v
}

// GetWasCidrs returns the WasCidrs field value
func (o *EnvironmentInfo) GetWasCidrs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.WasCidrs
}

// GetWasCidrsOk returns a tuple with the WasCidrs field value
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetWasCidrsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WasCidrs, true
}

// SetWasCidrs sets field value
func (o *EnvironmentInfo) SetWasCidrs(v []string) {
	o.WasCidrs = v
}

// GetVulnCidrs returns the VulnCidrs field value
func (o *EnvironmentInfo) GetVulnCidrs() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.VulnCidrs
}

// GetVulnCidrsOk returns a tuple with the VulnCidrs field value
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetVulnCidrsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VulnCidrs, true
}

// SetVulnCidrs sets field value
func (o *EnvironmentInfo) SetVulnCidrs(v []string) {
	o.VulnCidrs = v
}

// GetEnv returns the Env field value
func (o *EnvironmentInfo) GetEnv() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Env
}

// GetEnvOk returns a tuple with the Env field value
// and a boolean to check if the value has been set.
func (o *EnvironmentInfo) GetEnvOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Env, true
}

// SetEnv sets field value
func (o *EnvironmentInfo) SetEnv(v string) {
	o.Env = v
}

func (o EnvironmentInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["externalIps"] = o.ExternalIps
	}
	if true {
		toSerialize["wasCidrs"] = o.WasCidrs
	}
	if true {
		toSerialize["vulnCidrs"] = o.VulnCidrs
	}
	if true {
		toSerialize["env"] = o.Env
	}
	return json.Marshal(toSerialize)
}

type NullableEnvironmentInfo struct {
	value *EnvironmentInfo
	isSet bool
}

func (v NullableEnvironmentInfo) Get() *EnvironmentInfo {
	return v.value
}

func (v *NullableEnvironmentInfo) Set(val *EnvironmentInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentInfo(val *EnvironmentInfo) *NullableEnvironmentInfo {
	return &NullableEnvironmentInfo{value: val, isSet: true}
}

func (v NullableEnvironmentInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


