/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// DomainsSubdomainsApiService DomainsSubdomainsApi service
type DomainsSubdomainsApiService service

type ApiAddSubdomainToDomainRequest struct {
	ctx context.Context
	ApiService *DomainsSubdomainsApiService
	parentPk string
	domain *Domain
	identity *string
}

func (r ApiAddSubdomainToDomainRequest) Domain(domain Domain) ApiAddSubdomainToDomainRequest {
	r.domain = &domain
	return r
}

func (r ApiAddSubdomainToDomainRequest) Identity(identity string) ApiAddSubdomainToDomainRequest {
	r.identity = &identity
	return r
}

func (r ApiAddSubdomainToDomainRequest) Execute() (*SubdomainEntity, *http.Response, error) {
	return r.ApiService.AddSubdomainToDomainExecute(r)
}

/*
AddSubdomainToDomain Add Subdomain To Domain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @return ApiAddSubdomainToDomainRequest
*/
func (a *DomainsSubdomainsApiService) AddSubdomainToDomain(ctx context.Context, parentPk string) ApiAddSubdomainToDomainRequest {
	return ApiAddSubdomainToDomainRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
	}
}

// Execute executes the request
//  @return SubdomainEntity
func (a *DomainsSubdomainsApiService) AddSubdomainToDomainExecute(r ApiAddSubdomainToDomainRequest) (*SubdomainEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubdomainEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsSubdomainsApiService.AddSubdomainToDomain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/domains/{parent_pk}/subdomains"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.domain == nil {
		return localVarReturnValue, nil, reportError("domain is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.domain
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDomainSubdomainRequest struct {
	ctx context.Context
	ApiService *DomainsSubdomainsApiService
	parentPk string
	entityPk string
	identity *string
}

func (r ApiGetDomainSubdomainRequest) Identity(identity string) ApiGetDomainSubdomainRequest {
	r.identity = &identity
	return r
}

func (r ApiGetDomainSubdomainRequest) Execute() (*SubdomainWithAssets, *http.Response, error) {
	return r.ApiService.GetDomainSubdomainExecute(r)
}

/*
GetDomainSubdomain Get Domain Subdomain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @param entityPk
 @return ApiGetDomainSubdomainRequest
*/
func (a *DomainsSubdomainsApiService) GetDomainSubdomain(ctx context.Context, parentPk string, entityPk string) ApiGetDomainSubdomainRequest {
	return ApiGetDomainSubdomainRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
		entityPk: entityPk,
	}
}

// Execute executes the request
//  @return SubdomainWithAssets
func (a *DomainsSubdomainsApiService) GetDomainSubdomainExecute(r ApiGetDomainSubdomainRequest) (*SubdomainWithAssets, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SubdomainWithAssets
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsSubdomainsApiService.GetDomainSubdomain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/domains/{parent_pk}/subdomains/{entity_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_pk"+"}", url.PathEscape(parameterToString(r.entityPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListDomainSubdomainsRequest struct {
	ctx context.Context
	ApiService *DomainsSubdomainsApiService
	parentPk string
	search *string
	marker *string
	limit *int32
	identity *string
}

func (r ApiListDomainSubdomainsRequest) Search(search string) ApiListDomainSubdomainsRequest {
	r.search = &search
	return r
}

func (r ApiListDomainSubdomainsRequest) Marker(marker string) ApiListDomainSubdomainsRequest {
	r.marker = &marker
	return r
}

func (r ApiListDomainSubdomainsRequest) Limit(limit int32) ApiListDomainSubdomainsRequest {
	r.limit = &limit
	return r
}

func (r ApiListDomainSubdomainsRequest) Identity(identity string) ApiListDomainSubdomainsRequest {
	r.identity = &identity
	return r
}

func (r ApiListDomainSubdomainsRequest) Execute() (*PaginatedEntityCollectionSubdomainEntity, *http.Response, error) {
	return r.ApiService.ListDomainSubdomainsExecute(r)
}

/*
ListDomainSubdomains List Domain Subdomains

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @return ApiListDomainSubdomainsRequest
*/
func (a *DomainsSubdomainsApiService) ListDomainSubdomains(ctx context.Context, parentPk string) ApiListDomainSubdomainsRequest {
	return ApiListDomainSubdomainsRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
	}
}

// Execute executes the request
//  @return PaginatedEntityCollectionSubdomainEntity
func (a *DomainsSubdomainsApiService) ListDomainSubdomainsExecute(r ApiListDomainSubdomainsRequest) (*PaginatedEntityCollectionSubdomainEntity, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedEntityCollectionSubdomainEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsSubdomainsApiService.ListDomainSubdomains")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/domains/{parent_pk}/subdomains"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	if r.marker != nil {
		localVarQueryParams.Add("marker", parameterToString(*r.marker, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveDomainSubdomainRequest struct {
	ctx context.Context
	ApiService *DomainsSubdomainsApiService
	parentPk string
	entityPk string
	identity *string
}

func (r ApiRemoveDomainSubdomainRequest) Identity(identity string) ApiRemoveDomainSubdomainRequest {
	r.identity = &identity
	return r
}

func (r ApiRemoveDomainSubdomainRequest) Execute() (*http.Response, error) {
	return r.ApiService.RemoveDomainSubdomainExecute(r)
}

/*
RemoveDomainSubdomain Remove Domain Subdomain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @param entityPk
 @return ApiRemoveDomainSubdomainRequest
*/
func (a *DomainsSubdomainsApiService) RemoveDomainSubdomain(ctx context.Context, parentPk string, entityPk string) ApiRemoveDomainSubdomainRequest {
	return ApiRemoveDomainSubdomainRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
		entityPk: entityPk,
	}
}

// Execute executes the request
func (a *DomainsSubdomainsApiService) RemoveDomainSubdomainExecute(r ApiRemoveDomainSubdomainRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsSubdomainsApiService.RemoveDomainSubdomain")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/domains/{parent_pk}/subdomains/{entity_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_pk"+"}", url.PathEscape(parameterToString(r.entityPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateDomainSubdomainRequest struct {
	ctx context.Context
	ApiService *DomainsSubdomainsApiService
	parentPk string
	entityPk string
	domain *Domain
	identity *string
}

func (r ApiUpdateDomainSubdomainRequest) Domain(domain Domain) ApiUpdateDomainSubdomainRequest {
	r.domain = &domain
	return r
}

func (r ApiUpdateDomainSubdomainRequest) Identity(identity string) ApiUpdateDomainSubdomainRequest {
	r.identity = &identity
	return r
}

func (r ApiUpdateDomainSubdomainRequest) Execute() (*http.Response, error) {
	return r.ApiService.UpdateDomainSubdomainExecute(r)
}

/*
UpdateDomainSubdomain Update Domain Subdomain

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param parentPk
 @param entityPk
 @return ApiUpdateDomainSubdomainRequest
*/
func (a *DomainsSubdomainsApiService) UpdateDomainSubdomain(ctx context.Context, parentPk string, entityPk string) ApiUpdateDomainSubdomainRequest {
	return ApiUpdateDomainSubdomainRequest{
		ApiService: a,
		ctx: ctx,
		parentPk: parentPk,
		entityPk: entityPk,
	}
}

// Execute executes the request
func (a *DomainsSubdomainsApiService) UpdateDomainSubdomainExecute(r ApiUpdateDomainSubdomainRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DomainsSubdomainsApiService.UpdateDomainSubdomain")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/domains/{parent_pk}/subdomains/{entity_pk}"
	localVarPath = strings.Replace(localVarPath, "{"+"parent_pk"+"}", url.PathEscape(parameterToString(r.parentPk, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"entity_pk"+"}", url.PathEscape(parameterToString(r.entityPk, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.domain == nil {
		return nil, reportError("domain is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.domain
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
