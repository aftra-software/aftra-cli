/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResolutionUpdate struct for ResolutionUpdate
type ResolutionUpdate struct {
	Resolution string `json:"resolution"`
}

// NewResolutionUpdate instantiates a new ResolutionUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResolutionUpdate(resolution string) *ResolutionUpdate {
	this := ResolutionUpdate{}
	this.Resolution = resolution
	return &this
}

// NewResolutionUpdateWithDefaults instantiates a new ResolutionUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResolutionUpdateWithDefaults() *ResolutionUpdate {
	this := ResolutionUpdate{}
	return &this
}

// GetResolution returns the Resolution field value
func (o *ResolutionUpdate) GetResolution() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resolution
}

// GetResolutionOk returns a tuple with the Resolution field value
// and a boolean to check if the value has been set.
func (o *ResolutionUpdate) GetResolutionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resolution, true
}

// SetResolution sets field value
func (o *ResolutionUpdate) SetResolution(v string) {
	o.Resolution = v
}

func (o ResolutionUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resolution"] = o.Resolution
	}
	return json.Marshal(toSerialize)
}

type NullableResolutionUpdate struct {
	value *ResolutionUpdate
	isSet bool
}

func (v NullableResolutionUpdate) Get() *ResolutionUpdate {
	return v.value
}

func (v *NullableResolutionUpdate) Set(val *ResolutionUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableResolutionUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableResolutionUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResolutionUpdate(val *ResolutionUpdate) *NullableResolutionUpdate {
	return &NullableResolutionUpdate{value: val, isSet: true}
}

func (v NullableResolutionUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResolutionUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


