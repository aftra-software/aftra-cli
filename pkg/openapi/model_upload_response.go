/*
Web backend for Vikingr

The main api for Vikingr

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UploadResponse struct for UploadResponse
type UploadResponse struct {
	SuccessCount int32 `json:"success_count"`
	FailedCount int32 `json:"failed_count"`
	Failures []UploadFailure `json:"failures"`
}

// NewUploadResponse instantiates a new UploadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadResponse(successCount int32, failedCount int32, failures []UploadFailure) *UploadResponse {
	this := UploadResponse{}
	this.SuccessCount = successCount
	this.FailedCount = failedCount
	this.Failures = failures
	return &this
}

// NewUploadResponseWithDefaults instantiates a new UploadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadResponseWithDefaults() *UploadResponse {
	this := UploadResponse{}
	return &this
}

// GetSuccessCount returns the SuccessCount field value
func (o *UploadResponse) GetSuccessCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SuccessCount
}

// GetSuccessCountOk returns a tuple with the SuccessCount field value
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetSuccessCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuccessCount, true
}

// SetSuccessCount sets field value
func (o *UploadResponse) SetSuccessCount(v int32) {
	o.SuccessCount = v
}

// GetFailedCount returns the FailedCount field value
func (o *UploadResponse) GetFailedCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FailedCount
}

// GetFailedCountOk returns a tuple with the FailedCount field value
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetFailedCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailedCount, true
}

// SetFailedCount sets field value
func (o *UploadResponse) SetFailedCount(v int32) {
	o.FailedCount = v
}

// GetFailures returns the Failures field value
func (o *UploadResponse) GetFailures() []UploadFailure {
	if o == nil {
		var ret []UploadFailure
		return ret
	}

	return o.Failures
}

// GetFailuresOk returns a tuple with the Failures field value
// and a boolean to check if the value has been set.
func (o *UploadResponse) GetFailuresOk() ([]UploadFailure, bool) {
	if o == nil {
		return nil, false
	}
	return o.Failures, true
}

// SetFailures sets field value
func (o *UploadResponse) SetFailures(v []UploadFailure) {
	o.Failures = v
}

func (o UploadResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["success_count"] = o.SuccessCount
	}
	if true {
		toSerialize["failed_count"] = o.FailedCount
	}
	if true {
		toSerialize["failures"] = o.Failures
	}
	return json.Marshal(toSerialize)
}

type NullableUploadResponse struct {
	value *UploadResponse
	isSet bool
}

func (v NullableUploadResponse) Get() *UploadResponse {
	return v.value
}

func (v *NullableUploadResponse) Set(val *UploadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadResponse(val *UploadResponse) *NullableUploadResponse {
	return &NullableUploadResponse{value: val, isSet: true}
}

func (v NullableUploadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


